{"version":3,"sources":["reduxe/actionTypes.js","reduxe/actions.js","utils/functions/localstoreFunctions.js","components/LeftPanel/index.js","containers/LeftPanelControl/index.js","components/TextFieldGroup/index.js","components/SubmitGroup/index.js","components/LoginPageView/index.js","api.js","utils/functions/getLoginPageMessage.js","containers/LoginPageControl/index.js","components/RadioButtonsGroup/index.js","components/RightPanel/index.js","components/StatusSelectedMenu/index.js","components/ContentViewItem/index.js","components/ContentView/index.js","components/BottomPanel/index.js","utils/functions/escapeHtml.js","containers/TasksPageControl/index.js","utils/functions/getSearchParams.js","utils/functions/createSearchParamsString.js","App.js","reduxe/reducers.js","reduxe/store.js","serviceWorker.js","index.js"],"names":["CURRENT_PAGE_URL","USER_DATA","setUserData","value","type","ITEM_NAME","setSessionData","username","token","localStorage","setItem","JSON","stringify","getSessionUsername","authData","getItem","parse","getSessionToken","clearSessionData","removeItem","Index","currentPage","handleLogout","className","Button","component","Link","to","startIcon","ViewWeek","size","variant","onClick","Logout","Login","useSelector","state","userData","dispatch","useDispatch","LeftPanel","fieldList","onChange","errorList","map","name","props","TextField","error","Boolean","helperText","onSubmitClick","children","useState","setErrorList","taskObject","setTaskObject","onSubmit","a","TextFieldGroup","target","label","currentPageUrl","handleLogin","message","Typography","SubmitGroup","api","axios","create","baseURL","developer","getTasksAndPages","url","params","get","response","tasks","data","totalPageCount","Math","ceil","total_task_count","console","loginPost","password","FormData","append","config","method","createPost","email","text","editPost","id","taskStatus","pathname","match","groups","param","color","location","useEffect","loginParams","loginResponse","status","LoginPageView","getLoginPageMessage","options","FormControl","FormLabel","RadioGroup","row","event","item","FormControlLabel","control","Radio","rows","multiline","sortField","sortDirection","handleChange","handleCreateTask","useStyles","makeStyles","ExpandMoreIcon","fontSize","statusMenuItem","display","div","cursor","isEditingEnabled","marginLeft","CustomMenu","withStyles","paper","border","padding","Menu","elevation","getvontentanchorel","anchorOrigin","vertical","horizontal","transformOrigin","classes","anchorElement","setAnchorElement","open","undefined","currentTarget","endIcon","ExpandMore","anchorEl","onClose","MenuListProps","Object","keys","key","MenuItem","selected","index","Number","noBorder","marginLeftAuto","userIsLogin","handleEditTask","setText","setTaskStatus","setIsEditingEnabled","fullWidth","defaultValue","StatusSelectedMenu","Fab","Check","itemProps","ContentViewItem","pagination","marginBottom","justifyContent","curentPage","onPageChange","Pagination","count","page","shape","showFirstButton","showLastButton","replace","history","setTasks","setTotalPageCount","searchParams","locationSearch","URLSearchParams","parseInt","getSearchParams","search","uploadData","escapeHtml","createResponse","handleChangeSearchParams","newParams","oldParams","toString","createSearchParamsString","push","editResponse","ContentView","BottomPanel","RightPanel","defaultProps","defaultTasksPage","App","LeftPanelControl","path","TasksPageControl","exact","LoginPageControl","resultReducer","combineReducers","store","createStore","applyMiddleware","ReduxThunk","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3eebc37.chunk.js","sourcesContent":["export const CURRENT_PAGE_URL = \"CURRENT_PAGE_URL\";\r\nexport const USER_DATA = \"USER_DATA\";\r\n","import { CURRENT_PAGE_URL, USER_DATA } from \"./actionTypes\";\r\n\r\nexport const setCurrentPageURL = (value) => ({ type: CURRENT_PAGE_URL, value });\r\n\r\nexport const setUserData = (value) => ({ type: USER_DATA, value });\r\n","const ITEM_NAME = \"test-task-backend-session\";\r\n\r\nexport function setSessionData(username, token) {\r\n    localStorage.setItem(ITEM_NAME, JSON.stringify({ username, token }));\r\n}\r\n\r\nexport function getSessionUsername() {\r\n    const authData = localStorage.getItem(ITEM_NAME);\r\n    return authData ? JSON.parse(authData)[\"username\"] : null;\r\n}\r\n\r\nexport function getSessionToken() {\r\n    const authData = localStorage.getItem(ITEM_NAME);\r\n    return authData ? JSON.parse(authData)[\"token\"] : null;\r\n}\r\n\r\nexport function clearSessionData() {\r\n    localStorage.removeItem(ITEM_NAME);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { ViewWeek } from \"@material-ui/icons\";\r\nimport { Login, Logout } from \"@mui/icons-material\";\r\n\r\nconst Index = ({ currentPage, username, handleLogout }) => (\r\n    <dir className=\"flex-column p-1 left-panel\">\r\n        <Button\r\n            component={Link}\r\n            to={`/?page=${currentPage}`}\r\n            startIcon={<ViewWeek className=\"r-90\" />}\r\n            size=\"large\"\r\n            variant=\"outlined\"\r\n        >\r\n            Tasks\r\n        </Button>\r\n        {username ? (\r\n            <Button\r\n                onClick={handleLogout}\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                startIcon={<Logout />}\r\n            >\r\n                Logout\r\n            </Button>\r\n        ) : (\r\n            <Button\r\n                component={Link}\r\n                to=\"/login\"\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                startIcon={<Login />}\r\n            >\r\n                Login\r\n            </Button>\r\n        )}\r\n    </dir>\r\n);\r\n\r\nIndex.propTypes = {\r\n    currentPage: PropTypes.string,\r\n    username: PropTypes.string,\r\n    handleLogout: PropTypes.func,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { clearSessionData } from \"../../utils/functions/localstoreFunctions\";\r\nimport LeftPanel from \"../../components/LeftPanel\";\r\nimport { setUserData } from \"../../reduxe/actions\";\r\nconst Index = () => {\r\n    const { currentPage, userData } = useSelector((state) => ({\r\n        currentPage: state.currentPage,\r\n        userData: state.userData,\r\n    }));\r\n    const dispatch = useDispatch();\r\n\r\n    const { username } = userData;\r\n\r\n    const handleLogout = () => {\r\n        clearSessionData();\r\n        dispatch(setUserData({}));\r\n    };\r\n\r\n    return (\r\n        <LeftPanel\r\n            username={username}\r\n            currentPage={currentPage}\r\n            handleLogout={handleLogout}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ fieldList, onChange, errorList }) =>\r\n    fieldList.map(({ name, ...props }) => (\r\n        <TextField\r\n            key={name}\r\n            name={name}\r\n            {...props}\r\n            error={Boolean(errorList[name])}\r\n            onChange={onChange}\r\n            helperText={errorList[name] ?? \" \"}\r\n        />\r\n    ));\r\n\r\nIndex.propTypes = {\r\n    fieldList: PropTypes.arrayOf(PropTypes.object),\r\n    onChange: PropTypes.func,\r\n    errorList: PropTypes.object,\r\n};\r\n\r\nexport default Index;\r\n","import { Button } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextFieldGroup from \"../TextFieldGroup\";\r\n\r\nconst Index = ({ onSubmitClick, fieldList, className, children }) => {\r\n    const [errorList, setErrorList] = useState({});\r\n    const [taskObject, setTaskObject] = useState({});\r\n\r\n    const handleChange = ({ target }) =>\r\n        setTaskObject({ ...taskObject, [target.name]: target.value });\r\n\r\n    const onSubmit = async () => setErrorList(await onSubmitClick(taskObject));\r\n\r\n    return (\r\n        <div className={\"flex-column content-space-between \" + className ?? \"\"}>\r\n            <TextFieldGroup\r\n                fieldList={fieldList}\r\n                onChange={handleChange}\r\n                errorList={errorList}\r\n            />\r\n            <Button variant=\"contained\" onClick={onSubmit}>\r\n                {children}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    onSubmitClick: PropTypes.func,\r\n    fieldList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            label: PropTypes.string,\r\n            row: PropTypes.number,\r\n            multiline: PropTypes.bool,\r\n        })\r\n    ),\r\n    children: PropTypes.string,\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SubmitGroup from \"../SubmitGroup\";\r\n\r\nconst fieldList = [\r\n    { name: \"username\", label: \"Username\" },\r\n    { name: \"password\", label: \"Password\" },\r\n];\r\n\r\nconst Index = ({ userData, currentPageUrl, handleLogin, message }) => (\r\n    <div className=\"flex-column f-1 content-center\">\r\n        {userData.username ? (\r\n            <>\r\n                <Typography>{`You are logged in as ${userData.username}.`}</Typography>\r\n                <Button\r\n                    component={Link}\r\n                    to={`/?page=${currentPageUrl}`}\r\n                    variant=\"outlined\"\r\n                >\r\n                    Go back to the Task Page\r\n                </Button>\r\n            </>\r\n        ) : (\r\n            <>\r\n                <Typography {...message} />\r\n                <SubmitGroup\r\n                    onSubmitClick={handleLogin}\r\n                    fieldList={fieldList}\r\n                    className=\"login-form\"\r\n                >\r\n                    Login\r\n                </SubmitGroup>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nIndex.propTypes = {\r\n    userData: PropTypes.object,\r\n    currentPageUrl: PropTypes.string,\r\n    handleLogout: PropTypes.func,\r\n    handleLogin: PropTypes.func,\r\n    message: PropTypes.shape({\r\n        color: PropTypes.string,\r\n        children: PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default Index;\r\n","import axios from \"axios\";\r\nimport { getSessionToken } from \"./utils/functions/localstoreFunctions\";\r\n\r\nexport const apiBaseURL = \"https://uxcandy.com/~shapoval/test-task-backend/v2\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: apiBaseURL,\r\n});\r\n\r\nconst developer = \"Example\";\r\n\r\nexport async function getTasksAndPages(url) {\r\n    const params = { developer };\r\n    try {\r\n        const response = await api.get(url, { params });\r\n        return {\r\n            tasks: response.data.message.tasks,\r\n            totalPageCount: Math.ceil(\r\n                response.data.message.total_task_count / 3\r\n            ),\r\n        };\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function loginPost({ username = \"\", password = \"\" }) {\r\n    try {\r\n        const data = new FormData();\r\n        data.append(\"username\", username);\r\n        data.append(\"password\", password);\r\n        const config = {\r\n            method: \"post\",\r\n            url: `/login?developer=${developer}`,\r\n            data: data,\r\n        };\r\n\r\n        return await api(config);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function createPost({ username, email, text }) {\r\n    try {\r\n        const data = new FormData();\r\n        data.append(\"username\", username);\r\n        data.append(\"email\", email);\r\n        data.append(\"text\", text);\r\n        const config = {\r\n            method: \"post\",\r\n            url: `/create?developer=${developer}`,\r\n            data: data,\r\n        };\r\n        return await api(config);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function editPost({ id, text, taskStatus }) {\r\n    try {\r\n        const data = new FormData();\r\n        data.append(\"id\", id);\r\n        data.append(\"text\", text);\r\n        data.append(\"status\", taskStatus);\r\n        data.append(\"token\", getSessionToken());\r\n        const config = {\r\n            method: \"post\",\r\n            url: `/edit/${id}?developer=${developer}`,\r\n            data: data,\r\n        };\r\n        return await api(config);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n","export default function (pathname) {\r\n    const match = pathname.match(/^\\/login\\/(?<param>[0])/);\r\n    if (match) {\r\n        switch (match.groups.param) {\r\n            case \"0\":\r\n                return { color: \"error\", children: \"You need to log in\" };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n","import LoginPageView from \"../../components/LoginPageView\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginPost } from \"../../api\";\r\nimport { setUserData } from \"../../reduxe/actions\";\r\nimport {\r\n    getSessionUsername,\r\n    setSessionData,\r\n    clearSessionData,\r\n} from \"../../utils/functions/localstoreFunctions\";\r\nimport getLoginPageMessage from \"../../utils/functions/getLoginPageMessage\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst OK = \"ok\";\r\n\r\nconst Index = ({ location }) => {\r\n    const { currentPageUrl, userData } = useSelector((state) => ({\r\n        currentPageUrl: state.currentPageUrl,\r\n        userData: state.userData,\r\n    }));\r\n    const dispatch = useDispatch();\r\n    const username = getSessionUsername() ?? userData.username;\r\n\r\n    useEffect(() => {\r\n        if (username && username !== userData.username)\r\n            dispatch(setUserData({ username }));\r\n    }, [username]);\r\n\r\n    const handleLogin = async (loginParams) => {\r\n        const loginResponse = await loginPost(loginParams);\r\n        if (loginResponse.status === 200 && loginResponse.data.status === OK) {\r\n            setSessionData(\r\n                loginParams.username,\r\n                loginResponse.data.message.token\r\n            );\r\n            dispatch(setUserData({ username: loginParams.username }));\r\n            return {};\r\n        }\r\n        return loginResponse.data.message;\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        clearSessionData();\r\n        setUserData({});\r\n    };\r\n\r\n    return (\r\n        <LoginPageView\r\n            userData={userData}\r\n            currentPageUrl={currentPageUrl}\r\n            message={getLoginPageMessage(location.pathname)}\r\n            handleLogout={handleLogout}\r\n            handleLogin={handleLogin}\r\n        />\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    location: PropTypes.object,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ label, options, value, onChange }) => (\r\n    <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">{label}</FormLabel>\r\n        <RadioGroup\r\n            row\r\n            value={value}\r\n            onChange={(event, value) => onChange(value)}\r\n        >\r\n            {options.map((item) => (\r\n                <FormControlLabel\r\n                    key={item}\r\n                    value={item}\r\n                    control={<Radio />}\r\n                    label={item}\r\n                />\r\n            ))}\r\n        </RadioGroup>\r\n    </FormControl>\r\n);\r\n\r\nIndex.propTypes = {\r\n    label: PropTypes.string,\r\n    options: PropTypes.arrayOf(PropTypes.string),\r\n    value: PropTypes.string,\r\n    onChange: () => {},\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport RadioButtons from \"../RadioButtonsGroup\";\r\nimport SubmitGroup from \"../SubmitGroup\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst fieldList = [\r\n    { name: \"username\", label: \"Name\" },\r\n    { name: \"email\", label: \"E-mail\" },\r\n    { name: \"text\", label: \"Task discription\", rows: 4, multiline: true },\r\n];\r\n\r\nconst Index = ({\r\n    sortField,\r\n    sortDirection,\r\n    handleChange,\r\n    handleCreateTask,\r\n}) => (\r\n    <div className=\"flex-column content-space-between\">\r\n        <div className=\"flex-column sort-tools\">\r\n            <RadioButtons\r\n                label=\"Sort Field\"\r\n                options={[\"username\", \"email\", \"status\"]}\r\n                value={sortField}\r\n                onChange={(value) => handleChange({ sortField: value })}\r\n            />\r\n            <RadioButtons\r\n                label=\"Sort Directions\"\r\n                options={[\"asc\", \"desc\"]}\r\n                value={sortDirection}\r\n                onChange={(value) => handleChange({ sortDirection: value })}\r\n            />\r\n        </div>\r\n        <SubmitGroup\r\n            onSubmitClick={handleCreateTask}\r\n            fieldList={fieldList}\r\n            className=\"margin-bottom-72\"\r\n        >\r\n            Submit\r\n        </SubmitGroup>\r\n    </div>\r\n);\r\n\r\nIndex.propTypes = {\r\n    sortField: PropTypes.string,\r\n    sortDirection: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    handleCreateTask: PropTypes.func,\r\n};\r\nexport default Index;\r\n","import { Menu, MenuItem } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { ExpandMore } from \"@material-ui/icons\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst options = {\r\n    0: \"Task not completed\",\r\n    1: \"Task not completed, edited by admin\",\r\n    10: \"Mission accomplished\",\r\n    11: \"The task was edited by the admin and completed\",\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    ExpandMoreIcon: {\r\n        fontSize: \"large\",\r\n    },\r\n    statusMenuItem: {\r\n        display: \"block\",\r\n    },\r\n    div: ({ isEditingEnabled }) => ({\r\n        cursor: isEditingEnabled ? \"arrow\" : \"pointer\",\r\n        marginLeft: \"auto\",\r\n    }),\r\n});\r\n\r\nconst CustomMenu = withStyles({\r\n    paper: {\r\n        border: \"2px solid rgba(49, 54, 65, 1)\",\r\n        \"& .MuiList-root\": {\r\n            padding: 0,\r\n        },\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getvontentanchorel={null}\r\n        anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"left\",\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst Index = ({ value, onChange, isEditingEnabled }) => {\r\n    const classes = useStyles({ isEditingEnabled });\r\n    const [anchorElement, setAnchorElement] = useState(null);\r\n    const menuOpen = ({ currentTarget }) => {\r\n        setAnchorElement(currentTarget);\r\n    };\r\n    const open = Boolean(anchorElement);\r\n\r\n    const onMenuItemClick = (index) => {\r\n        setAnchorElement(null);\r\n        onChange(index);\r\n    };\r\n\r\n    const menuClose = () => setAnchorElement(null);\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button\r\n                    id=\"basic-button\"\r\n                    aria-controls=\"basic-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={isEditingEnabled ? menuOpen : () => {}}\r\n                    endIcon={isEditingEnabled ? <ExpandMore /> : undefined}\r\n                >\r\n                    {`Status: ${options[value]}`}\r\n                </Button>\r\n                {isEditingEnabled && (\r\n                    <CustomMenu\r\n                        id=\"basic-menu\"\r\n                        anchorEl={anchorElement}\r\n                        open={open}\r\n                        onClose={menuClose}\r\n                        MenuListProps={{\r\n                            \"aria-labelledby\": \"basic-button\",\r\n                        }}\r\n                    >\r\n                        {Object.keys(options).map((key) => (\r\n                            <MenuItem\r\n                                key={key}\r\n                                className={classes.statusMenuItem}\r\n                                selected={key == value}\r\n                                onClick={() => onMenuItemClick(Number(key))}\r\n                            >\r\n                                {options[key]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </CustomMenu>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nIndex.propTypes = {\r\n    value: PropTypes.number,\r\n    onChange: PropTypes.func,\r\n    isEditingEnabled: PropTypes.bool,\r\n};\r\nexport default Index;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@mui/material\";\r\nimport StatusSelectedMenu from \"../StatusSelectedMenu\";\r\nimport { Fab, Typography } from \"@material-ui/core\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport { Check } from \"@material-ui/icons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles({\r\n    noBorder: {\r\n        border: \"none\",\r\n    },\r\n    marginLeftAuto: {\r\n        marginLeft: \"auto\",\r\n    },\r\n});\r\n\r\nconst Index = ({ data, userIsLogin, handleEditTask }) => {\r\n    const [text, setText] = useState(data.text);\r\n    const [taskStatus, setTaskStatus] = useState(data.status);\r\n    const classes = useStyles();\r\n    const [isEditingEnabled, setIsEditingEnabled] = useState(false);\r\n\r\n    return (\r\n        <dir className=\"p-1 flex-column task-box\">\r\n            <dir>\r\n                <Typography>{`USERNAME: ${data.username} E-MAIL: ${data.email}`}</Typography>\r\n            </dir>\r\n            {isEditingEnabled ? (\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    fullWidth\r\n                    defaultValue={data.text}\r\n                    onChange={(event) => setText(event.target.value)}\r\n                />\r\n            ) : (\r\n                <Typography>{data.text}</Typography>\r\n            )}\r\n\r\n            <dir className=\"flex-row\">\r\n                <StatusSelectedMenu\r\n                    value={taskStatus}\r\n                    onChange={(index) => setTaskStatus(index)}\r\n                    isEditingEnabled={isEditingEnabled}\r\n                />\r\n                {userIsLogin && (\r\n                    <Fab\r\n                        className={classes.marginLeftAuto}\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            if (isEditingEnabled) {\r\n                                handleEditTask({\r\n                                    id: data.id,\r\n                                    text,\r\n                                    taskStatus,\r\n                                });\r\n                            }\r\n                            setIsEditingEnabled(!isEditingEnabled);\r\n                        }}\r\n                    >\r\n                        {isEditingEnabled ? <Check /> : <Edit />}\r\n                    </Fab>\r\n                )}\r\n            </dir>\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    data: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        username: PropTypes.string,\r\n        email: PropTypes.string,\r\n        status: PropTypes.number,\r\n        text: PropTypes.string,\r\n    }),\r\n    userIsLogin: PropTypes.bool,\r\n    handleEditTask: PropTypes.func,\r\n};\r\nexport default Index;\r\n","import React from \"react\";\r\nimport ContentViewItem from \"../ContentViewItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ tasks, ...itemProps }) => (\r\n    <dir className=\"flex-column f-1 p-1\">\r\n        {tasks.map((item) => (\r\n            <ContentViewItem key={item.id} data={item} {...itemProps} />\r\n        ))}\r\n    </dir>\r\n);\r\n\r\nIndex.propTypes = {\r\n    tasks: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number,\r\n            username: PropTypes.string,\r\n            email: PropTypes.string,\r\n            status: PropTypes.number,\r\n            text: PropTypes.string,\r\n        })\r\n    ),\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles({\r\n    pagination: {\r\n        marginBottom: \"1rem\",\r\n        \"& > ul\": {\r\n            justifyContent: \"center\",\r\n        },\r\n    },\r\n});\r\n\r\nconst Index = ({ totalPageCount, curentPage, onPageChange }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Pagination\r\n            className={classes.pagination}\r\n            count={totalPageCount}\r\n            size=\"large\"\r\n            page={curentPage}\r\n            shape=\"rounded\"\r\n            onChange={(event, value) => onPageChange(value)}\r\n            showFirstButton\r\n            showLastButton\r\n        />\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    totalPageCount: PropTypes.number,\r\n    curentPage: PropTypes.number,\r\n    onPageChange: () => {},\r\n};\r\n\r\nexport default Index;\r\n","export default function (text) {\r\n    return text\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&#039;\");\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport RightPanel from \"../../components/RightPanel\";\r\nimport ContentView from \"../../components/ContentView\";\r\nimport BottomPanel from \"../../components/BottomPanel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createPost, editPost, getTasksAndPages } from \"../../api\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCurrentPageURL, setUserData } from \"../../reduxe/actions\";\r\nimport escapeHtml from \"../../utils/functions/escapeHtml\";\r\nimport getSearchParams from \"../../utils/functions/getSearchParams\";\r\nimport createSearchParamsString from \"../../utils/functions/createSearchParamsString\";\r\nimport { clearSessionData } from \"../../utils/functions/localstoreFunctions\";\r\n\r\nconst ERROR = \"error\";\r\n\r\nconst Index = ({ history, location }) => {\r\n    const userData = useSelector((state) => state.userData);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [totalPageCount, setTotalPageCount] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const searchParams = getSearchParams(location.search);\r\n\r\n    async function uploadData() {\r\n        const { tasks, totalPageCount } = await getTasksAndPages(\r\n            location.search\r\n        );\r\n        setTasks(tasks);\r\n        setTotalPageCount(totalPageCount);\r\n    }\r\n\r\n    async function handleCreateTask({ username = \"\", email = \"\", text = \"\" }) {\r\n        const createResponse = await createPost({\r\n            username,\r\n            email,\r\n            text: escapeHtml(text),\r\n        });\r\n        if (createResponse.data.status === \"error\") {\r\n            return createResponse.data.message;\r\n        } else {\r\n            uploadData(searchParams);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    const handleChangeSearchParams = (params) => {\r\n        const currentPageUrl =\r\n            location.pathname + createSearchParamsString(params, searchParams);\r\n        dispatch(setCurrentPageURL(currentPageUrl));\r\n        history.push(currentPageUrl);\r\n    };\r\n\r\n    const handleEditTask = async (data) => {\r\n        const editResponse = await editPost({\r\n            ...data,\r\n            text: escapeHtml(data.text),\r\n        });\r\n        if (\r\n            (editResponse.data.status =\r\n                ERROR && editResponse.data.message?.token)\r\n        ) {\r\n            clearSessionData();\r\n            dispatch(setUserData({}));\r\n            history.push(\"/login/0\");\r\n        } else {\r\n            uploadData();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        uploadData();\r\n    }, [location.search]);\r\n\r\n    return (\r\n        <dir className=\"flex-row f-1\">\r\n            <dir className=\"flex-column f-1 content-space-between\">\r\n                <ContentView\r\n                    tasks={tasks}\r\n                    userIsLogin={Boolean(userData.username)}\r\n                    handleEditTask={handleEditTask}\r\n                />\r\n                <BottomPanel\r\n                    totalPageCount={totalPageCount}\r\n                    curentPage={searchParams.page}\r\n                    onPageChange={(page) => handleChangeSearchParams({ page })}\r\n                />\r\n            </dir>\r\n            <RightPanel\r\n                sortDirection={searchParams.sortDirection}\r\n                sortField={searchParams.sortField}\r\n                handleChange={handleChangeSearchParams}\r\n                handleCreateTask={handleCreateTask}\r\n            />\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    history: PropTypes.object,\r\n    location: PropTypes.object,\r\n};\r\n\r\nIndex.defaultProps = {\r\n    history: {},\r\n    location: {},\r\n};\r\n\r\nexport default Index;\r\n","export default function (locationSearch) {\r\n    const searchParams = new URLSearchParams(locationSearch);\r\n    const page = parseInt(searchParams.get(\"page\"));\r\n    const sortDirection = searchParams.get(\"sort_direction\");\r\n    const sortField = searchParams.get(\"sort_field\");\r\n    return { page, sortDirection, sortField };\r\n}\r\n","export default function (newParams, oldParams) {\r\n    const searchParams = new URLSearchParams();\r\n    searchParams.append(\r\n        \"sort_field\",\r\n        newParams.sortField ?? oldParams.sortField\r\n    );\r\n    searchParams.append(\r\n        \"sort_direction\",\r\n        newParams.sortDirection ?? oldParams.sortDirection\r\n    );\r\n    searchParams.append(\"page\", newParams.page ?? oldParams.page);\r\n    return `?${searchParams.toString()}`;\r\n}\r\n","import React, { useEffect } from \"react\";\nimport { setUserData } from \"./reduxe/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { getSessionUsername } from \"./utils/functions/localstoreFunctions\";\nimport LeftPanelControl from \"./containers/LeftPanelControl\";\nimport LoginPageControl from \"./containers/LoginPageControl\";\nimport TasksPageControl from \"./containers/TasksPageControl\";\n\nconst defaultTasksPage = {\n    pathname: \"/tasks\",\n    search: \"?sort_field=username&sort_direction=asc&page=1\",\n};\n\nfunction App() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(setUserData({ username: getSessionUsername() }));\n    }, [dispatch]);\n\n    return (\n        <dir className=\"app\">\n            <LeftPanelControl />\n            <Switch>\n                <Route path=\"/tasks\" component={TasksPageControl} />\n                <Route exact path=\"/\">\n                    <Redirect to={defaultTasksPage} />\n                </Route>\n                <Route path=\"/login\" component={LoginPageControl} />\n            </Switch>\n        </dir>\n    );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { CURRENT_PAGE_URL, USER_DATA } from \"./actionTypes\";\r\n\r\nconst currentPageUrl = (state = \"\", { type, value }) => {\r\n    switch (type) {\r\n        case CURRENT_PAGE_URL:\r\n            return value;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst userData = (state = {}, { type, value }) => {\r\n    switch (type) {\r\n        case USER_DATA:\r\n            return value;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst resultReducer = combineReducers({ currentPageUrl, userData });\r\n\r\nexport default resultReducer;\r\n","import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport ReduxThunk from \"redux-thunk\";\nimport resultReducer from \"./reducers\";\n\nexport const store = createStore(resultReducer, applyMiddleware(ReduxThunk));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./reduxe/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}