{"version":3,"sources":["reduxe/actionTypes.js","reduxe/actions.js","utils/functions/localstoreFunctions.js","components/LeftPanel/index.js","containers/LeftPanelControl/index.js","components/TextFieldGroup/index.js","components/SubmitGroup/index.js","utils/const.js","components/LoginPageView/index.js","utils/functions/parseResponseData.js","api.js","utils/functions/getLoginPageMessage.js","containers/LoginPageControl/index.js","components/RadioButtonsGroup/index.js","components/RightPanel/index.js","components/StatusSelectedMenu/index.js","components/ContentViewItem/index.js","components/ContentView/index.js","components/BottomPanel/index.js","utils/functions/escapeHtml.js","containers/TasksPageControl/index.js","utils/functions/getSearchParams.js","utils/functions/createSearchParamsString.js","App.js","reduxe/reducers.js","reduxe/store.js","serviceWorker.js","index.js"],"names":["CURRENT_PAGE_URL","USER_DATA","setUserData","value","type","ITEM_NAME","setSessionData","username","token","localStorage","setItem","JSON","stringify","getSessionUsername","authData","getItem","parse","getSessionToken","clearSessionData","removeItem","Index","currentPage","handleLogout","className","Button","component","Link","to","startIcon","ViewWeek","size","variant","onClick","Logout","Login","useSelector","state","userData","dispatch","useDispatch","LeftPanel","fieldList","onChange","errorList","map","name","props","TextField","error","Boolean","helperText","onSubmitClick","children","useState","setErrorList","taskObject","setTaskObject","onSubmit","a","TextFieldGroup","target","ERROR","SUCCESS","SUCCSES_MESSAGES","login","create","edit","FIELDS","email","text","password","loginFieldList","label","createTaskFieldList","rows","multiline","currentPageUrl","handleLogin","message","Typography","SubmitGroup","data","result","status","api","axios","baseURL","developer","getTasksAndPages","url","params","get","response","tasks","totalPageCount","Math","ceil","total_task_count","toast","post","requestParams","dataFields","prefix","id","FormData","Object","keys","forEach","key","append","config","method","parseResponseData","success","pathname","match","groups","param","color","location","useEffect","loginParams","LoginPageView","getLoginPageMessage","options","FormControl","FormLabel","RadioGroup","row","event","item","FormControlLabel","control","Radio","sortField","sortDirection","handleChange","handleCreateTask","useStyles","makeStyles","ExpandMoreIcon","fontSize","statusMenuItem","display","div","cursor","isEditingEnabled","marginLeft","CustomMenu","withStyles","paper","border","padding","Menu","elevation","getvontentanchorel","anchorOrigin","vertical","horizontal","transformOrigin","classes","anchorElement","setAnchorElement","open","undefined","currentTarget","endIcon","ExpandMore","anchorEl","onClose","MenuListProps","MenuItem","selected","index","Number","noBorder","marginLeftAuto","userIsLogin","handleEditTask","setText","taskStatus","setTaskStatus","setIsEditingEnabled","Chip","icon","PersonOutline","AlternateEmail","fullWidth","defaultValue","StatusSelectedMenu","Fab","Check","itemProps","ContentViewItem","pagination","marginBottom","justifyContent","curentPage","onPageChange","Pagination","count","page","shape","showFirstButton","showLastButton","replace","history","setTasks","setTotalPageCount","searchParams","locationSearch","URLSearchParams","parseInt","getSearchParams","search","uploadData","escapeHtml","handleChangeSearchParams","newParams","oldParams","toString","createSearchParamsString","push","ContentView","BottomPanel","RightPanel","defaultProps","defaultTasksPage","App","LeftPanelControl","path","TasksPageControl","exact","LoginPageControl","resultReducer","combineReducers","store","createStore","applyMiddleware","ReduxThunk","window","hostname","ReactDOM","render","StrictMode","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAAaA,G,OAAmB,oBACnBC,EAAY,YCGZC,EAAc,SAACC,GAAD,MAAY,CAAEC,KAAMH,EAAWE,U,gBCJpDE,EAAY,4BAEX,SAASC,EAAeC,EAAUC,GACrCC,aAAaC,QAAQL,EAAWM,KAAKC,UAAU,CAAEL,WAAUC,WAGxD,SAASK,IACZ,IAAMC,EAAWL,aAAaM,QAAQV,GACtC,OAAOS,EAAWH,KAAKK,MAAMF,GAAX,SAAmC,KAGlD,SAASG,IACZ,IAAMH,EAAWL,aAAaM,QAAQV,GACtC,OAAOS,EAAWH,KAAKK,MAAMF,GAAX,MAAgC,KAG/C,SAASI,IACZT,aAAaU,WAAWd,G,uDC8Bbe,EAxCD,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAad,EAAhB,EAAgBA,SAAUe,EAA1B,EAA0BA,aAA1B,OACV,sBAAKC,UAAU,6BAAf,UACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,GAAE,iBAAYN,GACdO,UAAW,cAACC,EAAA,EAAD,CAAUN,UAAU,SAC/BO,KAAK,QACLC,QAAQ,WALZ,mBASCxB,EACG,cAACiB,EAAA,EAAD,CACIQ,QAASV,EACTS,QAAQ,WACRD,KAAK,QACLF,UAAW,cAACK,EAAA,EAAD,IAJf,oBASA,cAACT,EAAA,EAAD,CACIC,UAAWC,IACXC,GAAG,SACHI,QAAQ,WACRD,KAAK,QACLF,UAAW,cAACM,EAAA,EAAD,IALf,uBCAGd,EAvBD,WACV,MAAkCe,aAAY,SAACC,GAAD,MAAY,CACtDf,YAAae,EAAMf,YACnBgB,SAAUD,EAAMC,aAFZhB,EAAR,EAAQA,YAAagB,EAArB,EAAqBA,SAIfC,EAAWC,cAEThC,EAAa8B,EAAb9B,SAOR,OACI,cAACiC,EAAD,CACIjC,SAAUA,EACVc,YAAaA,EACbC,aATa,WACjBJ,IACAoB,EAASpC,EAAY,S,8FCOdkB,EAnBD,SAAC,GAAD,IAAGqB,EAAH,EAAGA,UAAWC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,UAAxB,OACVF,EAAUG,KAAI,kBAAGC,EAAH,EAAGA,KAASC,EAAZ,wBACV,cAACC,EAAA,EAAD,yBACIxB,UAAU,OAEVsB,KAAMA,GACFC,GAJR,IAKIE,MAAOC,QAAQN,EAAUE,IACzBH,SAAUA,EACVQ,WAAU,UAAEP,EAAUE,UAAZ,QAAqB,MAL1BA,OCkCFzB,EArCD,SAAC,GAAuD,IAAD,EAApD+B,EAAoD,EAApDA,cAAeV,EAAqC,EAArCA,UAAWlB,EAA0B,EAA1BA,UAAW6B,EAAe,EAAfA,SAClD,EAAkCC,mBAAS,IAA3C,mBAAOV,EAAP,KAAkBW,EAAlB,KACA,EAAoCD,mBAAS,IAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAKMC,EAAQ,uCAAG,sBAAAC,EAAA,kEAAYJ,EAAZ,SAA+BH,EAAcI,GAA7C,uGAAH,qDAEd,OACI,sBAAKhC,UAAS,UAAE,qCAAuCA,SAAzC,QAAsD,GAApE,UACI,cAACoC,EAAD,CACIlB,UAAWA,EACXC,SATS,SAAC,GAAD,IAAGkB,EAAH,EAAGA,OAAH,OACjBJ,EAAc,2BAAKD,GAAN,kBAAmBK,EAAOf,KAAOe,EAAOzD,UAS7CwC,UAAWA,IAEf,cAAC,IAAD,CAAQZ,QAAQ,YAAYC,QAASyB,EAArC,SACKL,QCtBJS,EAAQ,QACRC,EAAU,KAEVC,EAAmB,CAC5BC,MAAO,8FACPC,OAAQ,yIACRC,KAAM,oIAGGC,EAAS,CAClB5D,SAAU,OACV6D,MAAO,SACPC,KAAM,mBACNC,SAAU,WACV9D,MAAO,8BAGE+D,EAAiB,CAC1B,CAAE1B,KAAM,WAAY2B,MAAO,YAC3B,CAAE3B,KAAM,WAAY2B,MAAO,WAAYpE,KAAM,aAGpCqE,EAAsB,CAC/B,CAAE5B,KAAM,WAAY2B,MAAO,QAC3B,CAAE3B,KAAM,QAAS2B,MAAO,UACxB,CAAE3B,KAAM,OAAQ2B,MAAO,mBAAoBE,KAAM,EAAGC,WAAW,ICqBpDvD,EAvCD,SAAC,GAAD,IAAGiB,EAAH,EAAGA,SAAUuC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,QAA1C,OACV,qBAAKvD,UAAU,iCAAf,SACKc,EAAS9B,SACN,qCACI,cAACwE,EAAA,EAAD,yCAAqC1C,EAAS9B,SAA9C,OACA,cAAC,IAAD,CACIkB,UAAWC,IACXC,GAAE,iBAAYiD,GACd7C,QAAQ,WAHZ,yCASJ,qCACI,cAACgD,EAAA,EAAD,eAAgBD,IAChB,cAACE,EAAD,CACI7B,cAAe0B,EACfpC,UAAW8B,EACXhD,UAAU,aAHd,yB,0BCrBD,aAAsB,IAAD,IAAX0D,EAAW,uDAAJ,GAC5B,MAAO,CACHC,OAAM,UAAED,EAAKE,cAAP,QAAiBtB,EACvBiB,QAAO,UAAEG,EAAKH,eAAP,QAAkB,KCEpBM,EAAMC,IAAMpB,OAAO,CAC5BqB,QAHsB,uDAMpBC,EAAY,UAEX,SAAeC,EAAtB,kC,4CAAO,WAAgCC,GAAhC,iBAAA/B,EAAA,6DACGgC,EAAS,CAAEH,aADd,kBAGwBH,EAAIO,IAAIF,EAAK,CAAEC,WAHvC,cAGOE,EAHP,yBAIQ,CACHC,MAAOD,EAASX,KAAKH,QAAQe,MAC7BC,eAAgBC,KAAKC,KACjBJ,EAASX,KAAKH,QAAQmB,iBAAmB,KAPlD,uCAWCC,IAAMlD,MAAN,MAXD,kBAYQ,CAAE6C,MAAO,GAAIC,eAAgB,IAZrC,0D,sBAgBA,SAAeK,EAAtB,qC,8CAAO,WAAoBC,EAAeC,GAAnC,6BAAA3C,EAAA,6DACK4C,EAAeF,EAAfE,OAAQC,EAAOH,EAAPG,GAEVtB,EAAO,IAAIuB,SACjBC,OAAOC,KAAKL,GAAYM,SAAQ,SAACC,GAC7B3B,EAAK4B,OAAOD,EAAKP,EAAWO,OAG1BE,EAAS,CACXC,OAAQ,OACRtB,IAAI,IAAD,OAAMa,GAAN,OAAeC,EAAE,WAAOA,GAAO,GAA/B,sBAA+ChB,GAClDN,KAAMA,GAXP,kBAcwBG,EAAI0B,GAd5B,OAcOlB,EAdP,SAgB6BoB,EAAkBpB,EAASX,MAA/CC,EAhBT,EAgBSA,OAAQJ,EAhBjB,EAgBiBA,QAhBjB,KAiBSI,EAjBT,cAkBUrB,EAlBV,UAuBUC,EAvBV,2BAmBS2C,OAAOC,KAAK5B,GAAS6B,SAAQ,SAACC,GAC1BV,IAAMlD,MAAN,UAAemB,EAAOyC,GAAtB,aAA+B9B,EAAQ8B,QApBpD,oCAwBSV,IAAMe,QAAQlD,EAAiBuC,IAxBxC,0FA6BQ,CAAEpB,SAAQJ,YA7BlB,yCA+BCoB,IAAMlD,MAAN,MA/BD,kBAgCQgE,KAhCR,2D,oCC7BQ,YAAUE,GACrB,IAAMC,EAAQD,EAASC,MAAT,aAAe,gBAAf,YACd,OAAIA,GAES,MADDA,EAAMC,OAAOC,MAEN,CAAEC,MAAO,QAASlE,SAAU,sBAKxC,ICkDIhC,GA9CD,SAAC,GAAkB,IAAD,EAAfmG,EAAe,EAAfA,SACb,EAAqCpF,aAAY,SAACC,GAAD,MAAY,CACzDwC,eAAgBxC,EAAMwC,eACtBvC,SAAUD,EAAMC,aAFZuC,EAAR,EAAQA,eAAgBvC,EAAxB,EAAwBA,SAIlBC,EAAWC,cACXhC,EAAQ,UAAGM,WAAH,QAA2BwB,EAAS9B,SAElDiH,qBAAU,WACFjH,GAAYA,IAAa8B,EAAS9B,UAClC+B,EAASpC,EAAY,CAAEK,gBAC5B,CAACA,IAEJ,IAAMsE,EAAW,uCAAG,WAAO4C,GAAP,mBAAA/D,EAAA,sEACkByC,EAC9B,CAAEG,OAAQ,SACVmB,GAHY,uBACRvC,EADQ,EACRA,OAAQJ,EADA,EACAA,QAKZI,IAAWpB,IACXxD,EAAemH,EAAYlH,SAAUuE,EAAQtE,OAC7C8B,EAASpC,EAAY,CAAEK,SAAUkH,EAAYlH,aARjC,kBAUTuE,GAVS,2CAAH,sDAkBjB,OACI,cAAC4C,EAAD,CACIrF,SAAUA,EACVuC,eAAgBA,EAChBE,QAAS6C,GAAoBJ,EAASL,UACtC5F,aAVa,WACjBJ,IACAhB,EAAY,KASR2E,YAAaA,K,kDChBVzD,GA3BD,SAAC,GAAD,IAAGoD,EAAH,EAAGA,MAAOoD,EAAV,EAAUA,QAASzH,EAAnB,EAAmBA,MAAOuC,EAA1B,EAA0BA,SAA1B,OACV,eAACmF,GAAA,EAAD,CAAapG,UAAU,WAAvB,UACI,cAACqG,GAAA,EAAD,CAAWrG,UAAU,SAArB,SAA+B+C,IAC/B,cAACuD,GAAA,EAAD,CACIC,KAAG,EACH7H,MAAOA,EACPuC,SAAU,SAACuF,EAAO9H,GAAR,OAAkBuC,EAASvC,IAHzC,SAKKyH,EAAQhF,KAAI,SAACsF,GAAD,OACT,cAACC,GAAA,EAAD,CAEIhI,MAAO+H,EACPE,QAAS,cAACC,GAAA,EAAD,IACT7D,MAAO0D,GAHFA,YCyBV9G,GArCD,SAAC,GAAD,IACVkH,EADU,EACVA,UACAC,EAFU,EAEVA,cACAC,EAHU,EAGVA,aACAC,EAJU,EAIVA,iBAJU,OAMV,sBAAKlH,UAAU,oCAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,cAAC,GAAD,CACIiD,MAAM,aACNoD,QAAS,CAAC,WAAY,QAAS,UAC/BzH,MAAOmI,EACP5F,SAAU,SAACvC,GAAD,OAAWqI,EAAa,CAAEF,UAAWnI,OAEnD,cAAC,GAAD,CACIqE,MAAM,kBACNoD,QAAS,CAAC,MAAO,QACjBzH,MAAOoI,EACP7F,SAAU,SAACvC,GAAD,OAAWqI,EAAa,CAAED,cAAepI,UAG3D,cAAC6E,EAAD,CACI7B,cAAesF,EACfhG,UAAWgC,EACXlD,UAAU,QAHd,wB,iDCpBFqG,GAAU,CACZ,EAAG,qBACH,EAAG,sCACH,GAAI,uBACJ,GAAI,kDAGFc,GAAYC,aAAW,CACzBC,eAAgB,CACZC,SAAU,SAEdC,eAAgB,CACZC,QAAS,SAEbC,IAAK,kBAA2B,CAC5BC,OADC,EAAGC,iBACuB,QAAU,UACrCC,WAAY,WAIdC,GAAaC,aAAW,CAC1BC,MAAO,CACHC,OAAQ,gCACR,kBAAmB,CACfC,QAAS,KAJFH,EAOhB,SAACvG,GAAD,OACC,cAAC2G,GAAA,EAAD,aACIC,UAAW,EACXC,mBAAoB,KACpBC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,SAEZhH,OA8DG1B,GA1DD,SAAC,GAA2C,IAAzCjB,EAAwC,EAAxCA,MAAOuC,EAAiC,EAAjCA,SAAUwG,EAAuB,EAAvBA,iBACxBc,EAAUtB,GAAU,CAAEQ,qBAC5B,EAA0C7F,mBAAS,MAAnD,mBAAO4G,EAAP,KAAsBC,EAAtB,KAIMC,EAAOlH,QAAQgH,GAQrB,OACI,mCACI,gCACI,cAACzI,EAAA,EAAD,CACI+E,GAAG,eACH,gBAAc,aACd,gBAAc,OACd,gBAAe4D,EAAO,YAASC,EAC/BpI,QAASkH,EAnBR,SAAC,GAAuB,IAArBmB,EAAoB,EAApBA,cAChBH,EAAiBG,IAkBkC,aACvCC,QAASpB,EAAmB,cAACqB,GAAA,EAAD,SAAiBH,EANjD,2BAQgBxC,GAAQzH,MAEvB+I,GACG,cAACE,GAAD,CACI7C,GAAG,aACHiE,SAAUP,EACVE,KAAMA,EACNM,QAnBF,kBAAMP,EAAiB,OAoBrBQ,cAAe,CACX,kBAAmB,gBAN3B,SASKjE,OAAOC,KAAKkB,IAAShF,KAAI,SAACgE,GAAD,OACtB,cAAC+D,GAAA,EAAD,CAEIpJ,UAAWyI,EAAQlB,eACnB8B,SAAUhE,GAAOzG,EACjB6B,QAAS,kBAlCZ6I,EAkCkCC,OAAOlE,GAjC9DsD,EAAiB,WACjBxH,EAASmI,GAFW,IAACA,GA8BD,SAMKjD,GAAQhB,IALJA,c,iFC/E/B8B,GAAYC,aAAW,CACzBoC,SAAU,CACNxB,OAAQ,QAEZyB,eAAgB,CACZ7B,WAAY,UAmEL/H,GA/DD,SAAC,GAA2C,IAAzC6D,EAAwC,EAAxCA,KAAMgG,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAChC,EAAwB7H,mBAAS4B,EAAKZ,MAAtC,mBAAOA,EAAP,KAAa8G,EAAb,KACA,EAAoC9H,mBAAS4B,EAAKE,QAAlD,mBAAOiG,EAAP,KAAmBC,EAAnB,KACMrB,EAAUtB,KAChB,EAAgDrF,oBAAS,GAAzD,mBAAO6F,EAAP,KAAyBoC,EAAzB,KAEA,OACI,sBAAK/J,UAAU,2BAAf,UACI,sBAAKA,UAAU,WAAf,UACI,cAACgK,GAAA,EAAD,CAAMC,KAAM,cAACC,GAAA,EAAD,IAAmBjH,MAAOS,EAAK1E,WAC3C,cAACgL,GAAA,EAAD,CAAMC,KAAM,cAACE,GAAA,EAAD,IAAoBlH,MAAOS,EAAKb,WAE/C8E,EACG,cAACnG,EAAA,EAAD,CACIhB,QAAS,WACT4J,WAAS,EACTC,aAAc3G,EAAKZ,KACnB3B,SAAU,SAACuF,GAAD,OAAWkD,EAAQlD,EAAMrE,OAAOzD,UAG9C,cAAC,KAAD,UAAa8E,EAAKZ,OAGtB,sBAAK9C,UAAU,WAAf,UACI,cAACsK,GAAD,CACI1L,MAAOiL,EACP1I,SAAU,SAACmI,GAAD,OAAWQ,EAAcR,IACnC3B,iBAAkBA,IAErB+B,GACG,cAACa,GAAA,EAAD,CACIvK,UAAWyI,EAAQgB,eACnBlJ,KAAK,QACLE,QAAS,WACDkH,GACAgC,EAAe,CACX3E,GAAItB,EAAKsB,GACTlC,OACA+G,eAGRE,GAAqBpC,IAX7B,SAcKA,EAAmB,cAAC6C,GAAA,EAAD,IAAY,cAAC,KAAD,a,aCvCzC3K,GApBD,SAAC,GAAD,IAAGyE,EAAH,EAAGA,MAAUmG,EAAb,yBACV,qBAAKzK,UAAU,sBAAf,SACKsE,EAAMjD,KAAI,SAACsF,GAAD,OACP,cAAC+D,GAAD,aAA+BhH,KAAMiD,GAAU8D,GAAzB9D,EAAK3B,U,UCFjCmC,GAAYC,aAAW,CACzBuD,WAAY,CACRC,aAAc,OACd,SAAU,CACNC,eAAgB,aA2BbhL,GAtBD,SAAC,GAAkD,IAAhD0E,EAA+C,EAA/CA,eAAgBuG,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACnCtC,EAAUtB,KAChB,OACI,cAAC6D,GAAA,EAAD,CACIhL,UAAWyI,EAAQkC,WACnBM,MAAO1G,EACPhE,KAAK,QACL2K,KAAMJ,EACNK,MAAM,UACNhK,SAAU,SAACuF,EAAO9H,GAAR,OAAkBmM,EAAanM,IACzCwM,iBAAe,EACfC,gBAAc,KCzBX,YAAUvI,GACrB,OAAOA,EACFwI,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,WCWjBzL,GAAQ,SAAC,GAA2B,IAAzB0L,EAAwB,EAAxBA,QAASvF,EAAe,EAAfA,SAChBlF,EAAWF,aAAY,SAACC,GAAD,OAAWA,EAAMC,YAC9C,EAA0BgB,mBAAS,IAAnC,mBAAOwC,EAAP,KAAckH,EAAd,KACA,EAA4C1J,mBAAS,GAArD,mBAAOyC,EAAP,KAAuBkH,EAAvB,KACM1K,EAAWC,cACX0K,ECtBK,SAAUC,GACrB,IAAMD,EAAe,IAAIE,gBAAgBD,GAIzC,MAAO,CAAET,KAHIW,SAASH,EAAatH,IAAI,SAGxB4C,cAFO0E,EAAatH,IAAI,kBAET2C,UADZ2E,EAAatH,IAAI,eDkBd0H,CAAgB9F,EAAS+F,QALT,SAOtBC,IAPsB,2EAOrC,gCAAA7J,EAAA,sEAC4C8B,EACpC+B,EAAS+F,QAFjB,gBACYzH,EADZ,EACYA,MAAOC,EADnB,EACmBA,eAGfiH,EAASlH,GACTmH,EAAkBlH,GALtB,2CAPqC,oEAerC,6CAAApC,EAAA,iEAAkCnD,gBAAlC,MAA6C,GAA7C,MAAiD6D,aAAjD,MAAyD,GAAzD,MAA6DC,YAA7D,MAAoE,GAApE,WACsC8B,EAC9B,CAAEG,OAAQ,UACV,CACI/F,WACA6D,QACAC,KAAMmJ,GAAWnJ,KAN7B,mBACYa,EADZ,EACYA,OAAQJ,EADpB,EACoBA,QAQZI,IAAWpB,EATnB,uBAUQyJ,EAAWN,GAVnB,kBAWe,IAXf,gCAaWnI,GAbX,6CAfqC,sBA+BrC,IAAM2I,EAA2B,SAAC/H,GAC9B,IAAMd,EACF2C,EAASL,SElDN,SAAUwG,EAAWC,GAAY,IAAD,MACrCV,EAAe,IAAIE,gBAUzB,OATAF,EAAapG,OACT,aADJ,UAEI6G,EAAUpF,iBAFd,QAE2BqF,EAAUrF,WAErC2E,EAAapG,OACT,iBADJ,UAEI6G,EAAUnF,qBAFd,QAE+BoF,EAAUpF,eAEzC0E,EAAapG,OAAO,OAApB,UAA4B6G,EAAUjB,YAAtC,QAA8CkB,EAAUlB,MAClD,IAAN,OAAWQ,EAAaW,YFuCIC,CAAyBnI,EAAQuH,GACzD3K,EnBjDqC,CAAElC,KAAMJ,EAAkBG,MmBiDpCyE,IAC3BkI,EAAQgB,KAAKlJ,IAGXsG,EAAc,uCAAG,qCAAAxH,EAAA,6DAAS6C,EAAT,EAASA,GAAIlC,EAAb,EAAaA,KAAb,SACe8B,EAC9B,CAAEG,OAAO,OAASC,MAClB,CACIlC,KAAMmJ,GAAWnJ,GACjB7D,MAAOS,MALI,gBACXiE,EADW,EACXA,OAAQJ,EADG,EACHA,QAOZI,IAAWrB,GAASiB,EAAQtE,QAC5BU,IACAoB,EAASpC,EAAY,KACrB4M,EAAQgB,KAAK,aAEb5I,IAAWpB,GAASyJ,IAbL,2CAAH,sDAoBpB,OAJA/F,qBAAU,WACN+F,MACD,CAAChG,EAAS+F,SAGT,sBAAK/L,UAAU,eAAf,UACI,sBAAKA,UAAU,wCAAf,UACI,cAACwM,GAAD,CACIlI,MAAOA,EACPoF,YAAahI,QAAQZ,EAAS9B,UAC9B2K,eAAgBA,IAEpB,cAAC8C,GAAD,CACIlI,eAAgBA,EAChBuG,WAAYY,EAAaR,KACzBH,aAAc,SAACG,GAAD,OAAUgB,EAAyB,CAAEhB,eAG3D,cAACwB,GAAD,CACI1F,cAAe0E,EAAa1E,cAC5BD,UAAW2E,EAAa3E,UACxBE,aAAciF,EACdhF,iBA5EyB,kDAuFzCrH,GAAM8M,aAAe,CACjBpB,QAAS,GACTvF,SAAU,IAGCnG,UGpGT+M,GAAmB,CACrBjH,SAAU,SACVoG,OAAQ,kDAuBGc,OApBf,WACI,IAAM9L,EAAWC,cAKjB,OAJAiF,qBAAU,WACNlF,EAASpC,EAAY,CAAEK,SAAUM,SAClC,CAACyB,IAGA,sBAAKf,UAAU,MAAf,UACI,cAAC8M,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,SAAS7M,UAAW8M,KAChC,cAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAlB,SACI,cAAC,IAAD,CAAU3M,GAAIwM,OAElB,cAAC,IAAD,CAAOG,KAAK,SAAS7M,UAAWgN,Y,oBCP1CC,GAAgBC,aAAgB,CAAE/J,eAlBjB,WAAkC,IAAjCxC,EAAgC,uDAAxB,GAAwB,yCAAlBhC,EAAkB,EAAlBA,KAAMD,EAAY,EAAZA,MACxC,OAAQC,IACCJ,EACMG,EAEAiC,GAaqCC,SATvC,WAAkC,IAAjCD,EAAgC,uDAAxB,GAAwB,yCAAlBhC,EAAkB,EAAlBA,KAAMD,EAAY,EAAZA,MAClC,OAAQC,IACCH,EACME,EAEAiC,KAMJsM,MCnBFE,GAAQC,aAAYH,GAAeI,aAAgBC,OCQ5C9L,QACa,cAA7B+L,OAAOzH,SAAS0H,UAEiB,UAA7BD,OAAOzH,SAAS0H,UAEhBD,OAAOzH,SAAS0H,SAAS9H,MACrB,2D,OCPZ+H,IAASC,OACL,eAAC,IAAMC,WAAP,WACI,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,cAAC,IAAD,UACI,cAAC,GAAD,QAGR,cAAC,IAAD,CACIS,SAAS,aACTC,UAAW,IACXC,iBAAe,EACfC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,yBAAuB,EACvBC,WAAS,EACTC,cAAY,OAGpBC,SAASC,eAAe,SDsGpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,kB","file":"static/js/main.b7f6671a.chunk.js","sourcesContent":["export const CURRENT_PAGE_URL = \"CURRENT_PAGE_URL\";\r\nexport const USER_DATA = \"USER_DATA\";\r\n","import { CURRENT_PAGE_URL, USER_DATA } from \"./actionTypes\";\r\n\r\nexport const setCurrentPageURL = (value) => ({ type: CURRENT_PAGE_URL, value });\r\n\r\nexport const setUserData = (value) => ({ type: USER_DATA, value });\r\n","const ITEM_NAME = \"test-task-backend-session\";\r\n\r\nexport function setSessionData(username, token) {\r\n    localStorage.setItem(ITEM_NAME, JSON.stringify({ username, token }));\r\n}\r\n\r\nexport function getSessionUsername() {\r\n    const authData = localStorage.getItem(ITEM_NAME);\r\n    return authData ? JSON.parse(authData)[\"username\"] : null;\r\n}\r\n\r\nexport function getSessionToken() {\r\n    const authData = localStorage.getItem(ITEM_NAME);\r\n    return authData ? JSON.parse(authData)[\"token\"] : null;\r\n}\r\n\r\nexport function clearSessionData() {\r\n    localStorage.removeItem(ITEM_NAME);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { ViewWeek } from \"@material-ui/icons\";\r\nimport { Login, Logout } from \"@mui/icons-material\";\r\n\r\nconst Index = ({ currentPage, username, handleLogout }) => (\r\n    <dir className=\"flex-column p-1 left-panel\">\r\n        <Button\r\n            component={Link}\r\n            to={`/?page=${currentPage}`}\r\n            startIcon={<ViewWeek className=\"r-90\" />}\r\n            size=\"large\"\r\n            variant=\"outlined\"\r\n        >\r\n            Tasks\r\n        </Button>\r\n        {username ? (\r\n            <Button\r\n                onClick={handleLogout}\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                startIcon={<Logout />}\r\n            >\r\n                Logout\r\n            </Button>\r\n        ) : (\r\n            <Button\r\n                component={Link}\r\n                to=\"/login\"\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                startIcon={<Login />}\r\n            >\r\n                Login\r\n            </Button>\r\n        )}\r\n    </dir>\r\n);\r\n\r\nIndex.propTypes = {\r\n    currentPage: PropTypes.string,\r\n    username: PropTypes.string,\r\n    handleLogout: PropTypes.func,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { clearSessionData } from \"../../utils/functions/localstoreFunctions\";\r\nimport LeftPanel from \"../../components/LeftPanel\";\r\nimport { setUserData } from \"../../reduxe/actions\";\r\nconst Index = () => {\r\n    const { currentPage, userData } = useSelector((state) => ({\r\n        currentPage: state.currentPage,\r\n        userData: state.userData,\r\n    }));\r\n    const dispatch = useDispatch();\r\n\r\n    const { username } = userData;\r\n\r\n    const handleLogout = () => {\r\n        clearSessionData();\r\n        dispatch(setUserData({}));\r\n    };\r\n\r\n    return (\r\n        <LeftPanel\r\n            username={username}\r\n            currentPage={currentPage}\r\n            handleLogout={handleLogout}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ fieldList, onChange, errorList }) =>\r\n    fieldList.map(({ name, ...props }) => (\r\n        <TextField\r\n            className=\"mb-1\"\r\n            key={name}\r\n            name={name}\r\n            {...props}\r\n            error={Boolean(errorList[name])}\r\n            onChange={onChange}\r\n            helperText={errorList[name] ?? \" \"}\r\n        />\r\n    ));\r\n\r\nIndex.propTypes = {\r\n    fieldList: PropTypes.arrayOf(PropTypes.object),\r\n    onChange: PropTypes.func,\r\n    errorList: PropTypes.object,\r\n};\r\n\r\nexport default Index;\r\n","import { Button } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextFieldGroup from \"../TextFieldGroup\";\r\n\r\nconst Index = ({ onSubmitClick, fieldList, className, children }) => {\r\n    const [errorList, setErrorList] = useState({});\r\n    const [taskObject, setTaskObject] = useState({});\r\n\r\n    const handleChange = ({ target }) =>\r\n        setTaskObject({ ...taskObject, [target.name]: target.value });\r\n\r\n    const onSubmit = async () => setErrorList(await onSubmitClick(taskObject));\r\n\r\n    return (\r\n        <div className={\"flex-column content-space-between \" + className ?? \"\"}>\r\n            <TextFieldGroup\r\n                fieldList={fieldList}\r\n                onChange={handleChange}\r\n                errorList={errorList}\r\n            />\r\n            <Button variant=\"contained\" onClick={onSubmit}>\r\n                {children}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    onSubmitClick: PropTypes.func,\r\n    fieldList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            label: PropTypes.string,\r\n            row: PropTypes.number,\r\n            multiline: PropTypes.bool,\r\n        })\r\n    ),\r\n    children: PropTypes.string,\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Index;\r\n","export const ERROR = \"error\";\r\nexport const SUCCESS = \"ok\";\r\n\r\nexport const SUCCSES_MESSAGES = {\r\n    login: \"Добро пожаловать\",\r\n    create: \"Задача успешно добавлена\",\r\n    edit: \"Задача успешно изменена\",\r\n};\r\n\r\nexport const FIELDS = {\r\n    username: \"Name\",\r\n    email: \"E-mail\",\r\n    text: \"Task discription\",\r\n    password: \"Password\",\r\n    token: \"Kyкисы\",\r\n};\r\n\r\nexport const loginFieldList = [\r\n    { name: \"username\", label: \"Username\" },\r\n    { name: \"password\", label: \"Password\", type: \"password\" },\r\n];\r\n\r\nexport const createTaskFieldList = [\r\n    { name: \"username\", label: \"Name\" },\r\n    { name: \"email\", label: \"E-mail\" },\r\n    { name: \"text\", label: \"Task discription\", rows: 4, multiline: true },\r\n];\r\n","import React from \"react\";\r\nimport { Button, Typography } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SubmitGroup from \"../SubmitGroup\";\r\nimport { loginFieldList } from \"../../utils/const\";\r\n\r\nconst Index = ({ userData, currentPageUrl, handleLogin, message }) => (\r\n    <div className=\"flex-column f-1 content-center\">\r\n        {userData.username ? (\r\n            <>\r\n                <Typography>{`You are logged in as ${userData.username}.`}</Typography>\r\n                <Button\r\n                    component={Link}\r\n                    to={`/?page=${currentPageUrl}`}\r\n                    variant=\"outlined\"\r\n                >\r\n                    Go back to the Task Page\r\n                </Button>\r\n            </>\r\n        ) : (\r\n            <>\r\n                <Typography {...message} />\r\n                <SubmitGroup\r\n                    onSubmitClick={handleLogin}\r\n                    fieldList={loginFieldList}\r\n                    className=\"login-form\"\r\n                >\r\n                    Login\r\n                </SubmitGroup>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nIndex.propTypes = {\r\n    userData: PropTypes.object,\r\n    currentPageUrl: PropTypes.string,\r\n    handleLogout: PropTypes.func,\r\n    handleLogin: PropTypes.func,\r\n    message: PropTypes.shape({\r\n        color: PropTypes.string,\r\n        children: PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default Index;\r\n","import { ERROR } from \"../const\";\r\n\r\nexport default function (data = {}) {\r\n    return {\r\n        result: data.status ?? ERROR,\r\n        message: data.message ?? {},\r\n    };\r\n}\r\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport parseResponseData from \"./utils/functions/parseResponseData\";\r\nimport { ERROR, SUCCESS, SUCCSES_MESSAGES, FIELDS } from \"./utils/const\";\r\n\r\nexport const apiBaseURL = \"https://uxcandy.com/~shapoval/test-task-backend/v2\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: apiBaseURL,\r\n});\r\n\r\nconst developer = \"Example\";\r\n\r\nexport async function getTasksAndPages(url) {\r\n    const params = { developer };\r\n    try {\r\n        const response = await api.get(url, { params });\r\n        return {\r\n            tasks: response.data.message.tasks,\r\n            totalPageCount: Math.ceil(\r\n                response.data.message.total_task_count / 3\r\n            ),\r\n        };\r\n    } catch (error) {\r\n        toast.error(error);\r\n        return { tasks: [], totalPageCount: 0 };\r\n    }\r\n}\r\n\r\nexport async function post(requestParams, dataFields) {\r\n    const { prefix, id } = requestParams;\r\n\r\n    const data = new FormData();\r\n    Object.keys(dataFields).forEach((key) => {\r\n        data.append(key, dataFields[key]);\r\n    });\r\n\r\n    const config = {\r\n        method: \"post\",\r\n        url: `/${prefix}${id ? `/${id}` : \"\"}?developer=${developer}`,\r\n        data: data,\r\n    };\r\n    try {\r\n        const response = await api(config);\r\n\r\n        const { result, message } = parseResponseData(response.data);\r\n        switch (result) {\r\n            case ERROR:\r\n                Object.keys(message).forEach((key) => {\r\n                    toast.error(`${FIELDS[key]}: ${message[key]}`);\r\n                });\r\n                break;\r\n            case SUCCESS:\r\n                toast.success(SUCCSES_MESSAGES[prefix]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return { result, message };\r\n    } catch (error) {\r\n        toast.error(error);\r\n        return parseResponseData();\r\n    }\r\n}\r\n","export default function (pathname) {\r\n    const match = pathname.match(/^\\/login\\/(?<param>[0])/);\r\n    if (match) {\r\n        switch (match.groups.param) {\r\n            case \"0\":\r\n                return { color: \"error\", children: \"You need to log in\" };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n","import LoginPageView from \"../../components/LoginPageView\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { post } from \"../../api\";\r\nimport { SUCCESS } from \"../../utils/const\";\r\nimport { setUserData } from \"../../reduxe/actions\";\r\nimport {\r\n    getSessionUsername,\r\n    setSessionData,\r\n    clearSessionData,\r\n} from \"../../utils/functions/localstoreFunctions\";\r\nimport getLoginPageMessage from \"../../utils/functions/getLoginPageMessage\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ location }) => {\r\n    const { currentPageUrl, userData } = useSelector((state) => ({\r\n        currentPageUrl: state.currentPageUrl,\r\n        userData: state.userData,\r\n    }));\r\n    const dispatch = useDispatch();\r\n    const username = getSessionUsername() ?? userData.username;\r\n\r\n    useEffect(() => {\r\n        if (username && username !== userData.username)\r\n            dispatch(setUserData({ username }));\r\n    }, [username]);\r\n\r\n    const handleLogin = async (loginParams) => {\r\n        const { result, message } = await post(\r\n            { prefix: \"login\" },\r\n            loginParams\r\n        );\r\n\r\n        if (result === SUCCESS) {\r\n            setSessionData(loginParams.username, message.token);\r\n            dispatch(setUserData({ username: loginParams.username }));\r\n        }\r\n        return message;\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        clearSessionData();\r\n        setUserData({});\r\n    };\r\n\r\n    return (\r\n        <LoginPageView\r\n            userData={userData}\r\n            currentPageUrl={currentPageUrl}\r\n            message={getLoginPageMessage(location.pathname)}\r\n            handleLogout={handleLogout}\r\n            handleLogin={handleLogin}\r\n        />\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    location: PropTypes.object,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ label, options, value, onChange }) => (\r\n    <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">{label}</FormLabel>\r\n        <RadioGroup\r\n            row\r\n            value={value}\r\n            onChange={(event, value) => onChange(value)}\r\n        >\r\n            {options.map((item) => (\r\n                <FormControlLabel\r\n                    key={item}\r\n                    value={item}\r\n                    control={<Radio />}\r\n                    label={item}\r\n                />\r\n            ))}\r\n        </RadioGroup>\r\n    </FormControl>\r\n);\r\n\r\nIndex.propTypes = {\r\n    label: PropTypes.string,\r\n    options: PropTypes.arrayOf(PropTypes.string),\r\n    value: PropTypes.string,\r\n    onChange: () => {},\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport RadioButtons from \"../RadioButtonsGroup\";\r\nimport SubmitGroup from \"../SubmitGroup\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createTaskFieldList } from \"../../utils/const\";\r\n\r\nconst Index = ({\r\n    sortField,\r\n    sortDirection,\r\n    handleChange,\r\n    handleCreateTask,\r\n}) => (\r\n    <div className=\"flex-column content-space-between\">\r\n        <div className=\"flex-column sort-tools\">\r\n            <RadioButtons\r\n                label=\"Sort Field\"\r\n                options={[\"username\", \"email\", \"status\"]}\r\n                value={sortField}\r\n                onChange={(value) => handleChange({ sortField: value })}\r\n            />\r\n            <RadioButtons\r\n                label=\"Sort Directions\"\r\n                options={[\"asc\", \"desc\"]}\r\n                value={sortDirection}\r\n                onChange={(value) => handleChange({ sortDirection: value })}\r\n            />\r\n        </div>\r\n        <SubmitGroup\r\n            onSubmitClick={handleCreateTask}\r\n            fieldList={createTaskFieldList}\r\n            className=\"mb-78\"\r\n        >\r\n            Submit\r\n        </SubmitGroup>\r\n    </div>\r\n);\r\n\r\nIndex.propTypes = {\r\n    sortField: PropTypes.string,\r\n    sortDirection: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    handleCreateTask: PropTypes.func,\r\n};\r\nexport default Index;\r\n","import { Menu, MenuItem } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { ExpandMore } from \"@material-ui/icons\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst options = {\r\n    0: \"Task not completed\",\r\n    1: \"Task not completed, edited by admin\",\r\n    10: \"Mission accomplished\",\r\n    11: \"The task was edited by the admin and completed\",\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    ExpandMoreIcon: {\r\n        fontSize: \"large\",\r\n    },\r\n    statusMenuItem: {\r\n        display: \"block\",\r\n    },\r\n    div: ({ isEditingEnabled }) => ({\r\n        cursor: isEditingEnabled ? \"arrow\" : \"pointer\",\r\n        marginLeft: \"auto\",\r\n    }),\r\n});\r\n\r\nconst CustomMenu = withStyles({\r\n    paper: {\r\n        border: \"2px solid rgba(49, 54, 65, 1)\",\r\n        \"& .MuiList-root\": {\r\n            padding: 0,\r\n        },\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getvontentanchorel={null}\r\n        anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"left\",\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst Index = ({ value, onChange, isEditingEnabled }) => {\r\n    const classes = useStyles({ isEditingEnabled });\r\n    const [anchorElement, setAnchorElement] = useState(null);\r\n    const menuOpen = ({ currentTarget }) => {\r\n        setAnchorElement(currentTarget);\r\n    };\r\n    const open = Boolean(anchorElement);\r\n\r\n    const onMenuItemClick = (index) => {\r\n        setAnchorElement(null);\r\n        onChange(index);\r\n    };\r\n\r\n    const menuClose = () => setAnchorElement(null);\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button\r\n                    id=\"basic-button\"\r\n                    aria-controls=\"basic-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={isEditingEnabled ? menuOpen : () => {}}\r\n                    endIcon={isEditingEnabled ? <ExpandMore /> : undefined}\r\n                >\r\n                    {`Status: ${options[value]}`}\r\n                </Button>\r\n                {isEditingEnabled && (\r\n                    <CustomMenu\r\n                        id=\"basic-menu\"\r\n                        anchorEl={anchorElement}\r\n                        open={open}\r\n                        onClose={menuClose}\r\n                        MenuListProps={{\r\n                            \"aria-labelledby\": \"basic-button\",\r\n                        }}\r\n                    >\r\n                        {Object.keys(options).map((key) => (\r\n                            <MenuItem\r\n                                key={key}\r\n                                className={classes.statusMenuItem}\r\n                                selected={key == value}\r\n                                onClick={() => onMenuItemClick(Number(key))}\r\n                            >\r\n                                {options[key]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </CustomMenu>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nIndex.propTypes = {\r\n    value: PropTypes.number,\r\n    onChange: PropTypes.func,\r\n    isEditingEnabled: PropTypes.bool,\r\n};\r\nexport default Index;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@mui/material\";\r\nimport StatusSelectedMenu from \"../StatusSelectedMenu\";\r\nimport { Chip, Fab, Typography } from \"@material-ui/core\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport { Check } from \"@material-ui/icons\";\r\nimport PropTypes from \"prop-types\";\r\nimport { AlternateEmail, PersonOutline } from \"@mui/icons-material\";\r\n\r\nconst useStyles = makeStyles({\r\n    noBorder: {\r\n        border: \"none\",\r\n    },\r\n    marginLeftAuto: {\r\n        marginLeft: \"auto\",\r\n    },\r\n});\r\n\r\nconst Index = ({ data, userIsLogin, handleEditTask }) => {\r\n    const [text, setText] = useState(data.text);\r\n    const [taskStatus, setTaskStatus] = useState(data.status);\r\n    const classes = useStyles();\r\n    const [isEditingEnabled, setIsEditingEnabled] = useState(false);\r\n\r\n    return (\r\n        <dir className=\"p-1 flex-column task-box\">\r\n            <dir className=\"flex-row\">\r\n                <Chip icon={<PersonOutline />} label={data.username} />\r\n                <Chip icon={<AlternateEmail />} label={data.email} />\r\n            </dir>\r\n            {isEditingEnabled ? (\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    fullWidth\r\n                    defaultValue={data.text}\r\n                    onChange={(event) => setText(event.target.value)}\r\n                />\r\n            ) : (\r\n                <Typography>{data.text}</Typography>\r\n            )}\r\n\r\n            <dir className=\"flex-row\">\r\n                <StatusSelectedMenu\r\n                    value={taskStatus}\r\n                    onChange={(index) => setTaskStatus(index)}\r\n                    isEditingEnabled={isEditingEnabled}\r\n                />\r\n                {userIsLogin && (\r\n                    <Fab\r\n                        className={classes.marginLeftAuto}\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            if (isEditingEnabled) {\r\n                                handleEditTask({\r\n                                    id: data.id,\r\n                                    text,\r\n                                    taskStatus,\r\n                                });\r\n                            }\r\n                            setIsEditingEnabled(!isEditingEnabled);\r\n                        }}\r\n                    >\r\n                        {isEditingEnabled ? <Check /> : <Edit />}\r\n                    </Fab>\r\n                )}\r\n            </dir>\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    data: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        username: PropTypes.string,\r\n        email: PropTypes.string,\r\n        status: PropTypes.number,\r\n        text: PropTypes.string,\r\n    }),\r\n    userIsLogin: PropTypes.bool,\r\n    handleEditTask: PropTypes.func,\r\n};\r\nexport default Index;\r\n","import React from \"react\";\r\nimport ContentViewItem from \"../ContentViewItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ tasks, ...itemProps }) => (\r\n    <dir className=\"flex-column f-1 p-1\">\r\n        {tasks.map((item) => (\r\n            <ContentViewItem key={item.id} data={item} {...itemProps} />\r\n        ))}\r\n    </dir>\r\n);\r\n\r\nIndex.propTypes = {\r\n    tasks: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number,\r\n            username: PropTypes.string,\r\n            email: PropTypes.string,\r\n            status: PropTypes.number,\r\n            text: PropTypes.string,\r\n        })\r\n    ),\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles({\r\n    pagination: {\r\n        marginBottom: \"1rem\",\r\n        \"& > ul\": {\r\n            justifyContent: \"center\",\r\n        },\r\n    },\r\n});\r\n\r\nconst Index = ({ totalPageCount, curentPage, onPageChange }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Pagination\r\n            className={classes.pagination}\r\n            count={totalPageCount}\r\n            size=\"large\"\r\n            page={curentPage}\r\n            shape=\"rounded\"\r\n            onChange={(event, value) => onPageChange(value)}\r\n            showFirstButton\r\n            showLastButton\r\n        />\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    totalPageCount: PropTypes.number,\r\n    curentPage: PropTypes.number,\r\n    onPageChange: () => {},\r\n};\r\n\r\nexport default Index;\r\n","export default function (text) {\r\n    return text\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&#039;\");\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport RightPanel from \"../../components/RightPanel\";\r\nimport ContentView from \"../../components/ContentView\";\r\nimport BottomPanel from \"../../components/BottomPanel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getTasksAndPages, post } from \"../../api\";\r\nimport { SUCCESS, ERROR } from \"../../utils/const\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCurrentPageURL, setUserData } from \"../../reduxe/actions\";\r\nimport escapeHtml from \"../../utils/functions/escapeHtml\";\r\nimport getSearchParams from \"../../utils/functions/getSearchParams\";\r\nimport createSearchParamsString from \"../../utils/functions/createSearchParamsString\";\r\nimport {\r\n    clearSessionData,\r\n    getSessionToken,\r\n} from \"../../utils/functions/localstoreFunctions\";\r\n\r\nconst Index = ({ history, location }) => {\r\n    const userData = useSelector((state) => state.userData);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [totalPageCount, setTotalPageCount] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const searchParams = getSearchParams(location.search);\r\n\r\n    async function uploadData() {\r\n        const { tasks, totalPageCount } = await getTasksAndPages(\r\n            location.search\r\n        );\r\n        setTasks(tasks);\r\n        setTotalPageCount(totalPageCount);\r\n    }\r\n\r\n    async function handleCreateTask({ username = \"\", email = \"\", text = \"\" }) {\r\n        const { result, message } = await post(\r\n            { prefix: \"create\" },\r\n            {\r\n                username,\r\n                email,\r\n                text: escapeHtml(text),\r\n            }\r\n        );\r\n        if (result === SUCCESS) {\r\n            uploadData(searchParams);\r\n            return {};\r\n        }\r\n        return message;\r\n    }\r\n\r\n    const handleChangeSearchParams = (params) => {\r\n        const currentPageUrl =\r\n            location.pathname + createSearchParamsString(params, searchParams);\r\n        dispatch(setCurrentPageURL(currentPageUrl));\r\n        history.push(currentPageUrl);\r\n    };\r\n\r\n    const handleEditTask = async ({ id, text }) => {\r\n        const { result, message } = await post(\r\n            { prefix: `edit`, id },\r\n            {\r\n                text: escapeHtml(text),\r\n                token: getSessionToken(),\r\n            }\r\n        );\r\n        if (result === ERROR && message.token) {\r\n            clearSessionData();\r\n            dispatch(setUserData({}));\r\n            history.push(\"/login/0\");\r\n        }\r\n        if (result === SUCCESS) uploadData();\r\n    };\r\n\r\n    useEffect(() => {\r\n        uploadData();\r\n    }, [location.search]);\r\n\r\n    return (\r\n        <dir className=\"flex-row f-1\">\r\n            <dir className=\"flex-column f-1 content-space-between\">\r\n                <ContentView\r\n                    tasks={tasks}\r\n                    userIsLogin={Boolean(userData.username)}\r\n                    handleEditTask={handleEditTask}\r\n                />\r\n                <BottomPanel\r\n                    totalPageCount={totalPageCount}\r\n                    curentPage={searchParams.page}\r\n                    onPageChange={(page) => handleChangeSearchParams({ page })}\r\n                />\r\n            </dir>\r\n            <RightPanel\r\n                sortDirection={searchParams.sortDirection}\r\n                sortField={searchParams.sortField}\r\n                handleChange={handleChangeSearchParams}\r\n                handleCreateTask={handleCreateTask}\r\n            />\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    history: PropTypes.object,\r\n    location: PropTypes.object,\r\n};\r\n\r\nIndex.defaultProps = {\r\n    history: {},\r\n    location: {},\r\n};\r\n\r\nexport default Index;\r\n","export default function (locationSearch) {\r\n    const searchParams = new URLSearchParams(locationSearch);\r\n    const page = parseInt(searchParams.get(\"page\"));\r\n    const sortDirection = searchParams.get(\"sort_direction\");\r\n    const sortField = searchParams.get(\"sort_field\");\r\n    return { page, sortDirection, sortField };\r\n}\r\n","export default function (newParams, oldParams) {\r\n    const searchParams = new URLSearchParams();\r\n    searchParams.append(\r\n        \"sort_field\",\r\n        newParams.sortField ?? oldParams.sortField\r\n    );\r\n    searchParams.append(\r\n        \"sort_direction\",\r\n        newParams.sortDirection ?? oldParams.sortDirection\r\n    );\r\n    searchParams.append(\"page\", newParams.page ?? oldParams.page);\r\n    return `?${searchParams.toString()}`;\r\n}\r\n","import React, { useEffect } from \"react\";\nimport { setUserData } from \"./reduxe/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { getSessionUsername } from \"./utils/functions/localstoreFunctions\";\nimport LeftPanelControl from \"./containers/LeftPanelControl\";\nimport LoginPageControl from \"./containers/LoginPageControl\";\nimport TasksPageControl from \"./containers/TasksPageControl\";\n\nconst defaultTasksPage = {\n    pathname: \"/tasks\",\n    search: \"?sort_field=username&sort_direction=asc&page=1\",\n};\n\nfunction App() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(setUserData({ username: getSessionUsername() }));\n    }, [dispatch]);\n\n    return (\n        <dir className=\"app\">\n            <LeftPanelControl />\n            <Switch>\n                <Route path=\"/tasks\" component={TasksPageControl} />\n                <Route exact path=\"/\">\n                    <Redirect to={defaultTasksPage} />\n                </Route>\n                <Route path=\"/login\" component={LoginPageControl} />\n            </Switch>\n        </dir>\n    );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { CURRENT_PAGE_URL, USER_DATA } from \"./actionTypes\";\r\n\r\nconst currentPageUrl = (state = \"\", { type, value }) => {\r\n    switch (type) {\r\n        case CURRENT_PAGE_URL:\r\n            return value;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst userData = (state = {}, { type, value }) => {\r\n    switch (type) {\r\n        case USER_DATA:\r\n            return value;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst resultReducer = combineReducers({ currentPageUrl, userData });\r\n\r\nexport default resultReducer;\r\n","import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport ReduxThunk from \"redux-thunk\";\nimport resultReducer from \"./reducers\";\n\nexport const store = createStore(resultReducer, applyMiddleware(ReduxThunk));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./reduxe/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n        <ToastContainer\n            position=\"top-center\"\n            autoClose={5000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnVisibilityChange\n            draggable\n            pauseOnHover\n        />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}