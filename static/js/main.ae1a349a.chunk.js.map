{"version":3,"sources":["reduxe/actionTypes.js","reduxe/actions.js","utils/functions/localstoreFunctions.js","components/panels/LeftPanel/index.js","containers/LeftPanelControl/index.js","components/TextFieldGroup/index.js","components/LoginForm/index.js","components/LoginPageView/index.js","api.js","utils/functions/getLoginPageMessage.js","containers/LoginPageControl/index.js","components/RadioButtonsGroup/index.js","components/AddNewTaskGroup/index.js","components/RightPanel/index.js","components/StatusSelectedMenu/index.js","components/ContentViewItem/index.js","components/ContentView/index.js","components/BottomPanel/index.js","utils/functions/escapeHtml.js","containers/TasksPageControl/index.js","utils/functions/getSearchParams.js","utils/functions/createSearchParamsString.js","App.js","reduxe/reducers.js","reduxe/store.js","serviceWorker.js","index.js"],"names":["CURRENT_PAGE_URL","USER_DATA","setUserData","value","type","ITEM_NAME","setSessionData","username","token","localStorage","setItem","JSON","stringify","getSessionUsername","authData","getItem","parse","getSessionToken","clearSessionData","removeItem","Index","currentPage","className","to","useSelector","state","userData","LeftPanel","handleLogout","fieldList","onChange","errorList","map","name","props","TextField","error","Boolean","helperText","textFieldList","label","handleLogin","useState","data","setData","setErrorList","Stack","spacing","justifyContent","style","width","TextFieldGroup","target","direction","Button","onClick","a","variant","content","useStyles","makeStyles","loginPageViewStack","height","currentPageUrl","message","classes","alignItems","Typography","component","Link","LoginForm","api","axios","create","baseURL","developer","getTasksAndPages","url","params","get","response","tasks","totalPageCount","Math","ceil","total_task_count","console","loginPost","password","FormData","append","config","method","createPost","email","text","editPost","id","taskStatus","pathname","match","groups","param","color","children","location","dispatch","useDispatch","useEffect","loginParams","loginResponse","status","LoginPageView","getLoginPageMessage","options","FormControl","FormLabel","RadioGroup","row","event","item","FormControlLabel","control","Radio","rows","multiline","onSubmitClick","taskObject","setTaskObject","onSubmit","rightStack","flex","sortField","sortDirection","handleChange","handleCreateTask","AddNewTaskGroup","ExpandMoreIcon","fontSize","statusMenuItem","display","div","cursor","isEditingEnabled","marginLeft","CustomMenu","withStyles","paper","border","padding","Menu","elevation","getvontentanchorel","anchorOrigin","vertical","horizontal","transformOrigin","anchorElement","setAnchorElement","open","undefined","currentTarget","endIcon","ExpandMore","anchorEl","onClose","MenuListProps","Object","keys","key","MenuItem","selected","index","noBorder","marginLeftAuto","userIsLogin","handleEditTask","setText","setTaskStatus","setIsEditingEnabled","fullWidth","defaultValue","InputProps","notchedOutline","readOnly","StatusSelectedMenu","Fab","size","CheckCircle","itemProps","ContentViewItem","curentPage","onPageChange","Pagination","count","page","shape","replace","history","setTasks","setTotalPageCount","searchParams","locationSearch","URLSearchParams","parseInt","getSearchParams","search","uploadData","escapeHtml","createResponse","handleChangeSearchParams","curentPageUrl","newParams","oldParams","toString","createSearchParamsString","push","editResponse","ContentView","BottomPanel","RightPanel","defaultProps","defaultTasksPage","App","LeftPanelControl","path","TasksPageControl","exact","LoginPageControl","resultReducer","combineReducers","store","createStore","applyMiddleware","ReduxThunk","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAAaA,G,OAAmB,oBACnBC,EAAY,YCGZC,EAAc,SAACC,GAAD,MAAY,CAAEC,KAAMH,EAAWE,U,gBCJpDE,EAAY,4BAEX,SAASC,EAAeC,EAAUC,GACrCC,aAAaC,QAAQL,EAAWM,KAAKC,UAAU,CAAEL,WAAUC,WAGxD,SAASK,IACZ,IAAMC,EAAWL,aAAaM,QAAQV,GACtC,OAAOS,EAAWH,KAAKK,MAAMF,GAAX,SAAmC,KAGlD,SAASG,IACZ,IAAMH,EAAWL,aAAaM,QAAQV,GACtC,OAAOS,EAAWH,KAAKK,MAAMF,GAAX,MAAgC,KAG/C,SAASI,IACZT,aAAaU,WAAWd,G,mBCKbe,EAlBD,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAad,EAAe,EAAfA,SAC1B,OACI,sBAAKe,UAAU,iCAAf,UACI,cAAC,IAAD,CAAMC,GAAE,iBAAYF,GAApB,mBACCd,EACG,cAAC,IAAD,CAAMgB,GAAG,UAAT,oBAEA,cAAC,IAAD,CAAMA,GAAG,SAAT,4BCaDH,EAnBD,WACV,MAAkCI,aAAY,SAACC,GAAD,MAAY,CACtDJ,YAAaI,EAAMJ,YACnBK,SAAUD,EAAMC,aAFZL,EAAR,EAAQA,YAKAd,EALR,EAAqBmB,SAKbnB,SAIR,OACI,cAACoB,EAAD,CACIpB,SAAUA,EACVc,YAAaA,EACbO,aANa,kBAAMV,Q,uGCShBE,EAlBD,SAAC,GAAD,IAAGS,EAAH,EAAGA,UAAWC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,UAAxB,OACVF,EAAUG,KAAI,kBAAGC,EAAH,EAAGA,KAASC,EAAZ,wBACV,cAACC,EAAA,EAAD,yBAEIF,KAAMA,GACFC,GAHR,IAIIE,MAAOC,QAAQN,EAAUE,IACzBH,SAAUA,EACVQ,WAAU,UAAEP,EAAUE,UAAZ,QAAqB,MAL1BA,OCFXM,EAAgB,CAClB,CAAEN,KAAM,WAAYO,MAAO,YAC3B,CAAEP,KAAM,WAAYO,MAAO,aAwChBpB,EArCD,SAAC,GAAqB,IAAnBqB,EAAkB,EAAlBA,YACb,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,IAA3C,mBAAOX,EAAP,KAAkBc,EAAlB,KAKA,OACI,qCACI,cAACC,EAAA,EAAD,CACIC,QAAS,EACTC,eAAe,gBACfC,MAAO,CAAEC,MAAO,SAHpB,SAKI,cAACC,EAAD,CACItB,UAAWU,EACXT,SAZK,SAAC,GAAD,IAAGsB,EAAH,EAAGA,OAAH,OACjBR,EAAQ,2BAAKD,GAAN,kBAAaS,EAAOnB,KAAOmB,EAAOjD,UAY7B4B,UAAWA,MAGnB,cAACe,EAAA,EAAD,CAAOO,UAAU,MAAMN,QAAS,EAAhC,SACI,cAACO,EAAA,EAAD,CACIC,QAAO,sBAAE,sBAAAC,EAAA,kEAAYX,EAAZ,SAA+BJ,EAAYE,GAA3C,uGACTc,QAAQ,WACRC,QAAQ,QAHZ,yB,SCxBVC,EAAYC,YAAW,CACzBC,mBAAoB,CAAEX,MAAO,OAAQY,OAAQ,UAqDlC1C,EAlDD,SAAC,GAMR,IALHM,EAKE,EALFA,SACAqC,EAIE,EAJFA,eACAnC,EAGE,EAHFA,aACAa,EAEE,EAFFA,YACAuB,EACE,EADFA,QAEMC,EAAUN,IAChB,OACI,cAACb,EAAA,EAAD,CACIxB,UAAW2C,EAAQJ,mBACnBd,QAAS,EACTC,eAAe,SACfkB,WAAW,SAJf,SAMKxC,EAASnB,SACN,qCACI,cAAC4D,EAAA,EAAD,yCAAqCzC,EAASnB,SAA9C,OACA,cAAC+C,EAAA,EAAD,CACIc,UAAWC,IACX9C,GAAE,iBAAYwC,GACdN,QAAQ,WAHZ,sCAOA,cAACH,EAAA,EAAD,CAAQG,QAAQ,YAAYF,QAAS3B,EAArC,uBAKJ,qCACI,cAACuC,EAAA,EAAD,eAAgBH,IAChB,cAACM,EAAD,CAAW7B,YAAaA,U,SCtC/B8B,E,OAAMC,EAAMC,OAAO,CAC5BC,QAHsB,uDAMpBC,EAAY,UAEX,SAAeC,EAAtB,kC,4CAAO,WAAgCC,GAAhC,iBAAArB,EAAA,6DACGsB,EAAS,CAAEH,aADd,kBAGwBJ,EAAIQ,IAAIF,EAAK,CAAEC,WAHvC,cAGOE,EAHP,yBAIQ,CACHC,MAAOD,EAASrC,KAAKqB,QAAQiB,MAC7BC,eAAgBC,KAAKC,KACjBJ,EAASrC,KAAKqB,QAAQqB,iBAAmB,KAPlD,gCAWCC,QAAQlD,MAAR,MAXD,0D,sBAeA,SAAemD,EAAtB,kC,4CAAO,uCAAA/B,EAAA,iEAA2BjD,gBAA3B,MAAsC,GAAtC,MAA0CiF,gBAA1C,MAAqD,GAArD,YAEO7C,EAAO,IAAI8C,UACZC,OAAO,WAAYnF,GACxBoC,EAAK+C,OAAO,WAAYF,GAClBG,EAAS,CACXC,OAAQ,OACRf,IAAI,oBAAD,OAAsBF,GACzBhC,KAAMA,GARX,SAWc4B,EAAIoB,GAXlB,0EAaCL,QAAQlD,MAAR,MAbD,2D,sBAiBA,SAAeyD,EAAtB,kC,4CAAO,qCAAArC,EAAA,6DAA4BjD,EAA5B,EAA4BA,SAAUuF,EAAtC,EAAsCA,MAAOC,EAA7C,EAA6CA,KAA7C,UAEOpD,EAAO,IAAI8C,UACZC,OAAO,WAAYnF,GACxBoC,EAAK+C,OAAO,QAASI,GACrBnD,EAAK+C,OAAO,OAAQK,GACdJ,EAAS,CACXC,OAAQ,OACRf,IAAI,qBAAD,OAAuBF,GAC1BhC,KAAMA,GATX,SAWc4B,EAAIoB,GAXlB,0EAaCL,QAAQlD,MAAR,MAbD,2D,sBAiBA,SAAe4D,EAAtB,kC,4CAAO,qCAAAxC,EAAA,6DAA0ByC,EAA1B,EAA0BA,GAAIF,EAA9B,EAA8BA,KAAMG,EAApC,EAAoCA,WAApC,UAEOvD,EAAO,IAAI8C,UACZC,OAAO,KAAMO,GAClBtD,EAAK+C,OAAO,OAAQK,GACpBpD,EAAK+C,OAAO,SAAUQ,GACtBvD,EAAK+C,OAAO,QAASzE,KACf0E,EAAS,CACXC,OAAQ,OACRf,IAAI,SAAD,OAAWoB,EAAX,sBAA2BtB,GAC9BhC,KAAMA,GAVX,UAYc4B,EAAIoB,GAZlB,2EAcCL,QAAQlD,MAAR,MAdD,2D,mCC5DQ,WAAU+D,GACrB,IAAMC,EAAQD,EAASC,MAAT,YAAe,gBAAf,YACd,OAAIA,GAES,MADDA,EAAMC,OAAOC,MAEN,CAAEC,MAAO,QAASC,SAAU,sBAKxC,ICmDIpF,EA9CD,SAAC,GAAkB,IAAD,EAAfqF,EAAe,EAAfA,SACb,EAAqCjF,aAAY,SAACC,GAAD,MAAY,CACzDsC,eAAgBtC,EAAMsC,eACtBrC,SAAUD,EAAMC,aAFZqC,EAAR,EAAQA,eAAgBrC,EAAxB,EAAwBA,SAIlBgF,EAAWC,cACXpG,EAAQ,UAAGM,WAAH,QAA2Ba,EAASnB,SAElDqG,qBAAU,WACFrG,GAAYA,IAAamB,EAASnB,UAClCmG,EAASxG,EAAY,CAAEK,gBAC5B,CAACA,IAEJ,IAAMkC,EAAW,uCAAG,WAAOoE,GAAP,eAAArD,EAAA,sEACY+B,EAAUsB,GADtB,UAEa,OADvBC,EADU,QAEEC,QAjBf,OAiBiCD,EAAcnE,KAAKoE,OAFvC,uBAGZzG,EACIuG,EAAYtG,SACZuG,EAAcnE,KAAKqB,QAAQxD,OAE/BkG,EAASxG,EAAY,CAAEK,SAAUsG,EAAYtG,YAPjC,kBAQL,IARK,gCAUTuG,EAAcnE,KAAKqB,SAVV,2CAAH,sDAkBjB,OACI,cAACgD,EAAD,CACItF,SAAUA,EACVqC,eAAgBA,EAChBC,QAASiD,EAAoBR,EAASN,UACtCvE,aAVa,WACjBV,IACAhB,EAAY,KASRuC,YAAaA,K,iDCjBVrB,GA3BD,SAAC,GAAD,IAAGoB,EAAH,EAAGA,MAAO0E,EAAV,EAAUA,QAAS/G,EAAnB,EAAmBA,MAAO2B,EAA1B,EAA0BA,SAA1B,OACV,eAACqF,GAAA,EAAD,CAAa/C,UAAU,WAAvB,UACI,cAACgD,GAAA,EAAD,CAAWhD,UAAU,SAArB,SAA+B5B,IAC/B,cAAC6E,GAAA,EAAD,CACIC,KAAG,EACHnH,MAAOA,EACP2B,SAAU,SAACyF,EAAOpH,GAAR,OAAkB2B,EAAS3B,IAHzC,SAKK+G,EAAQlF,KAAI,SAACwF,GAAD,OACT,cAACC,GAAA,EAAD,CAEItH,MAAOqH,EACPE,QAAS,cAACC,EAAA,EAAD,IACTnF,MAAOgF,GAHFA,YCbnBjF,GAAgB,CAClB,CAAEN,KAAM,WAAYO,MAAO,QAC3B,CAAEP,KAAM,QAASO,MAAO,UACxB,CAAEP,KAAM,OAAQO,MAAO,mBAAoBoF,KAAM,EAAGC,WAAW,IA8BpDzG,GA3BD,SAAC,GAAuB,IAArB0G,EAAoB,EAApBA,cACb,EAAkCpF,mBAAS,IAA3C,mBAAOX,EAAP,KAAkBc,EAAlB,KACA,EAAoCH,mBAAS,IAA7C,mBAAOqF,EAAP,KAAmBC,EAAnB,KAKMC,EAAQ,uCAAG,sBAAAzE,EAAA,kEAAYX,EAAZ,SAA+BiF,EAAcC,GAA7C,uGAAH,qDAEd,OACI,eAACjF,EAAA,EAAD,CAAOC,QAAS,EAAGC,eAAe,gBAAlC,UACI,cAACG,EAAD,CACItB,UAAWU,GACXT,SATS,SAAC,GAAD,IAAGsB,EAAH,EAAGA,OAAH,OACjB4E,EAAc,2BAAKD,GAAN,kBAAmB3E,EAAOnB,KAAOmB,EAAOjD,UAS7C4B,UAAWA,IAEf,cAACuB,EAAA,EAAD,CAAQG,QAAQ,YAAYF,QAAS0E,EAArC,wBCpBNtE,GAAYC,YAAW,CACzBsE,WAAY,CACRlF,eAAgB,SAChBkB,WAAY,SACZiE,KAAM,eAqCC/G,GAjCD,SAAC,GAKR,IAJHgH,EAIE,EAJFA,UACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,aACAC,EACE,EADFA,iBAEMtE,EAAUN,KAEhB,OACI,eAACb,EAAA,EAAD,CAAOC,QAAS,EAAGzB,UAAW2C,EAAQiE,WAAtC,UACI,cAAC,GAAD,CACI1F,MAAM,aACN0E,QAAS,CAAC,WAAY,QAAS,UAC/B/G,MAAOiI,EACPtG,SAAU,SAAC3B,GAAD,OAAWmI,EAAa,CAAEF,UAAWjI,OAEnD,cAAC,GAAD,CACIqC,MAAM,kBACN0E,QAAS,CAAC,MAAO,QACjB/G,MAAOkI,EACPvG,SAAU,SAAC3B,GAAD,OAAWmI,EAAa,CAAED,cAAelI,OAEvD,cAACqI,GAAD,CAAiBV,cAAeS,Q,iDC9BtCrB,GAAU,CACZ,EAAG,qBACH,EAAG,sCACH,GAAI,uBACJ,GAAI,kDAGFvD,GAAYC,YAAW,CACzB6E,eAAgB,CACZC,SAAU,SAEdC,eAAgB,CACZC,QAAS,SAEbC,IAAK,kBAA2B,CAC5BC,OADC,EAAGC,iBACuB,QAAU,UACrCC,WAAY,WAIdC,GAAaC,aAAW,CAC1BC,MAAO,CACHC,OAAQ,gCACR,kBAAmB,CACfC,QAAS,KAJFH,EAOhB,SAAChH,GAAD,OACC,cAACoH,GAAA,EAAD,aACIC,UAAW,EACXC,mBAAoB,KACpBC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,SAEZzH,OA+DGd,GA3DD,SAAC,GAA2C,IAAzCjB,EAAwC,EAAxCA,MAAO2B,EAAiC,EAAjCA,SAAUiH,EAAuB,EAAvBA,iBACxB9E,EAAUN,GAAU,CAAEoF,qBAC5B,EAA0CrG,mBAAS,MAAnD,mBAAOmH,EAAP,KAAsBC,EAAtB,KAIMC,EAAO1H,QAAQwH,GASrB,OACI,mCACI,gCACI,cAAC,KAAD,CACI5D,GAAG,eACH,gBAAc,aACd,gBAAc,OACd,gBAAe8D,EAAO,YAASC,EAC/BzG,QAASwF,EApBR,SAAC,GAAuB,IAArBkB,EAAoB,EAApBA,cAChBH,EAAiBG,IAmBkC,aACvCC,QAASnB,EAAmB,cAACoB,GAAA,EAAD,SAAiBH,EANjD,2BAQgB9C,GAAQ/G,MAEvB4I,GACG,cAACE,GAAD,CACIhD,GAAG,aACHmE,SAAUP,EACVE,KAAMA,EACNM,QApBF,kBAAMP,EAAiB,OAqBrBQ,cAAe,CACX,kBAAmB,gBAN3B,SASKC,OAAOC,KAAKtD,IAASlF,KAAI,SAACyI,GAAD,OACtB,cAACC,GAAA,EAAD,CAEIpJ,UAAW2C,EAAQ0E,eACnBgC,SAAUF,IAAQtK,EAClBoD,QAAS,kBAnCZqH,EAmCkCH,EAlCvDX,EAAiB,WACjBhI,EAAS8I,GAFW,IAACA,GA+BD,SAMK1D,GAAQuD,IALJA,c,mDCjF/B9G,GAAYC,YAAW,CACzBiH,SAAU,CACNzB,OAAQ,QAEZ0B,eAAgB,CACZ9B,WAAY,UAiEL5H,GA7DD,SAAC,GAA2C,IAAzCuB,EAAwC,EAAxCA,KAAMoI,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAChC,EAAwBtI,mBAASC,EAAKoD,MAAtC,mBAAOA,EAAP,KAAakF,EAAb,KACA,EAAoCvI,mBAASC,EAAKoE,QAAlD,mBAAOb,EAAP,KAAmBgF,EAAnB,KACMjH,EAAUN,KAChB,EAAgDjB,oBAAS,GAAzD,mBAAOqG,EAAP,KAAyBoC,EAAzB,KACA,OACI,sBAAK7J,UAAU,2BAAf,UACI,8BACI,cAAC,KAAD,8BAA0BqB,EAAKpC,SAA/B,oBAAmDoC,EAAKmD,WAG5D,cAAC3D,EAAA,EAAD,CACIsB,QAAQ,WACR2H,WAAS,EACTC,aAAc1I,EAAKoD,KACnBuF,WAAY,CACRrH,QAAS,CAAEsH,eAAgBtH,EAAQ4G,UACnCW,UAAWzC,GAEfjH,SAAU,SAACyF,GAAD,OAAW0D,EAAQ1D,EAAMnE,OAAOjD,UAE9C,eAAC2C,EAAA,EAAD,CAAOO,UAAU,MAAjB,UACI,cAACoI,GAAD,CACItL,MAAOwC,EAAKoE,OACZjF,SAAU,SAAC8I,GAAD,OAAWM,EAAcN,IACnC7B,iBAAkBA,IAErBgC,GACG,cAACW,GAAA,EAAD,CACIpK,UAAW2C,EAAQ6G,eACnBa,KAAK,QACLpI,QAAS,WACDwF,GACAiC,EAAe,CACX/E,GAAItD,EAAKsD,GACTF,OACAG,eAGRiF,GAAqBpC,IAX7B,SAcKA,EAAmB,cAAC6C,GAAA,EAAD,IAAkB,cAAC,KAAD,a,aClC/CxK,GAtBD,SAAC,GAA6B,IAA3B6D,EAA0B,EAA1BA,MAAU4G,EAAgB,kBACvC,OACI,qBAAKvK,UAAU,sBAAf,SACK2D,EAAMjD,KAAI,SAACwF,GAAD,OACP,cAACsE,GAAD,aAA+BnJ,KAAM6E,GAAUqE,GAAzBrE,EAAKvB,U,UCe5B7E,GAlBD,SAAC,GAAD,IAAG8D,EAAH,EAAGA,eAAgB6G,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,aAA/B,OACV,cAAClJ,EAAA,EAAD,CAAOC,QAAS,EAAGC,eAAe,eAAlC,SACI,cAACiJ,GAAA,EAAD,CACIC,MAAOhH,EAEPiH,KAAMJ,EACNK,MAAM,UACNtK,SAAU,SAACyF,EAAOpH,GAAR,OAAkB6L,EAAa7L,SCZtC,YAAU4F,GACrB,OAAOA,EACFsG,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,WCSjBjL,GAAQ,SAAC,GAA2B,IAAzBkL,EAAwB,EAAxBA,QAAS7F,EAAe,EAAfA,SAChB/E,EAAWF,aAAY,SAACC,GAAD,OAAWA,EAAMC,YAC9C,EAA0BgB,mBAAS,IAAnC,mBAAOuC,EAAP,KAAcsH,EAAd,KACA,EAA4C7J,mBAAS,GAArD,mBAAOwC,EAAP,KAAuBsH,EAAvB,KACM9F,EAAWC,cACX8F,ECpBK,SAAUC,GACrB,IAAMD,EAAe,IAAIE,gBAAgBD,GAIzC,MAAO,CAAEP,KAHIS,SAASH,EAAa1H,IAAI,SAGxBsD,cAFOoE,EAAa1H,IAAI,kBAETqD,UADZqE,EAAa1H,IAAI,eDgBd8H,CAAgBpG,EAASqG,QALT,SAOtBC,IAPsB,2EAOrC,gCAAAvJ,EAAA,sEAC4CoB,EACpC6B,EAASqG,QAFjB,gBACY7H,EADZ,EACYA,MAAOC,EADnB,EACmBA,eAGfqH,EAAStH,GACTuH,EAAkBtH,GALtB,2CAPqC,oEAerC,yCAAA1B,EAAA,iEAAkCjD,gBAAlC,MAA6C,GAA7C,MAAiDuF,aAAjD,MAAyD,GAAzD,MAA6DC,YAA7D,MAAoE,GAApE,WACiCF,EAAW,CACpCtF,WACAuF,QACAC,KAAMiH,GAAWjH,KAJzB,UAMuC,WAL7BkH,EADV,QAMuBtK,KAAKoE,OAN5B,yCAOekG,EAAetK,KAAKqB,SAPnC,cASQ+I,EAAWN,GATnB,kBAUe,IAVf,6CAfqC,sBA6BrC,IAAMS,EAA2B,SAACpI,GAC9B,IAAMqI,EACF1G,EAASN,SE9CN,SAAUiH,EAAWC,GAAY,IAAD,MACrCZ,EAAe,IAAIE,gBAUzB,OATAF,EAAa/G,OACT,aADJ,UAEI0H,EAAUhF,iBAFd,QAE2BiF,EAAUjF,WAErCqE,EAAa/G,OACT,iBADJ,UAEI0H,EAAU/E,qBAFd,QAE+BgF,EAAUhF,eAEzCoE,EAAa/G,OAAO,OAApB,UAA4B0H,EAAUjB,YAAtC,QAA8CkB,EAAUlB,MAClD,IAAN,OAAWM,EAAaa,YFmCIC,CAAyBzI,EAAQ2H,GACzD/F,ElB7CqC,CAAEtG,KAAMJ,EAAkBG,MkB6CpCgN,IAC3Bb,EAAQkB,KAAKL,IAGXnC,EAAc,uCAAG,WAAOrI,GAAP,eAAAa,EAAA,sEACQwC,EAAS,2BAC7BrD,GAD4B,IAE/BoD,KAAMiH,GAAWrK,EAAKoD,SAHP,SACb0H,EADa,QAMD9K,KAAKoE,OACN0G,EAAa9K,KAAKqB,QAAQxD,QAEvCU,IACAwF,EAASxG,EAAY,KACrBoM,EAAQkB,KAAK,aAEbT,IAbe,2CAAH,sDAqBpB,OAJAnG,qBAAU,WACNmG,MACD,CAACtG,EAASqG,SAGT,sBAAKxL,UAAU,eAAf,UACI,sBAAKA,UAAU,sCAAf,UACI,cAACoM,GAAD,CACIzI,MAAOA,EACP8F,YAAa1I,QAAQX,EAASnB,UAC9ByK,eAAgBA,IAEpB,cAAC2C,GAAD,CACIzI,eAAgBA,EAChB6G,WAAYU,EAAaN,KACzBH,aAAc,SAACG,GAAD,OAAUe,EAAyB,CAAEf,eAG3D,cAACyB,GAAD,CACIvF,cAAeoE,EAAapE,cAC5BD,UAAWqE,EAAarE,UACxBE,aAAc4E,EACd3E,iBA3EyB,kDAsFzCnH,GAAMyM,aAAe,CACjBvB,QAAS,GACT7F,SAAU,IAGCrF,UGjGT0M,GAAmB,CACrB3H,SAAU,SACV2G,OAAQ,kDAuBGiB,OApBf,WACI,IAAMrH,EAAWC,cAKjB,OAJAC,qBAAU,WACNF,EAASxG,EAAY,CAAEK,SAAUM,SAClC,CAAC6F,IAGA,sBAAKpF,UAAU,uBAAf,UACI,cAAC0M,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,SAAS7J,UAAW8J,KAChC,cAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAlB,SACI,cAAC,IAAD,CAAU1M,GAAIuM,OAElB,cAAC,IAAD,CAAOG,KAAK,SAAS7J,UAAWgK,W,oBCP1CC,GAAgBC,aAAgB,CAAEvK,eAlBjB,WAAkC,IAAjCtC,EAAgC,uDAAxB,GAAwB,yCAAlBrB,EAAkB,EAAlBA,KAAMD,EAAY,EAAZA,MACxC,OAAQC,IACCJ,EACMG,EAEAsB,GAaqCC,SATvC,WAAkC,IAAjCD,EAAgC,uDAAxB,GAAwB,yCAAlBrB,EAAkB,EAAlBA,KAAMD,EAAY,EAAZA,MAClC,OAAQC,IACCH,EACME,EAEAsB,KAMJ4M,MCnBFE,GAAQC,aAAYH,GAAeI,aAAgBC,OCQ5CrM,QACa,cAA7BsM,OAAOlI,SAASmI,UAEiB,UAA7BD,OAAOlI,SAASmI,UAEhBD,OAAOlI,SAASmI,SAASxI,MACrB,2DCTZyI,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACI,cAAC,IAAD,UACI,cAAC,GAAD,UAIZS,SAASC,eAAe,SDmHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,kB","file":"static/js/main.ae1a349a.chunk.js","sourcesContent":["export const CURRENT_PAGE_URL = \"CURRENT_PAGE_URL\";\r\nexport const USER_DATA = \"USER_DATA\";\r\n","import { CURRENT_PAGE_URL, USER_DATA } from \"./actionTypes\";\r\n\r\nexport const setCurrentPageURL = (value) => ({ type: CURRENT_PAGE_URL, value });\r\n\r\nexport const setUserData = (value) => ({ type: USER_DATA, value });\r\n","const ITEM_NAME = \"test-task-backend-session\";\r\n\r\nexport function setSessionData(username, token) {\r\n    localStorage.setItem(ITEM_NAME, JSON.stringify({ username, token }));\r\n}\r\n\r\nexport function getSessionUsername() {\r\n    const authData = localStorage.getItem(ITEM_NAME);\r\n    return authData ? JSON.parse(authData)[\"username\"] : null;\r\n}\r\n\r\nexport function getSessionToken() {\r\n    const authData = localStorage.getItem(ITEM_NAME);\r\n    return authData ? JSON.parse(authData)[\"token\"] : null;\r\n}\r\n\r\nexport function clearSessionData() {\r\n    localStorage.removeItem(ITEM_NAME);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ currentPage, username }) => {\r\n    return (\r\n        <dir className=\"flex-column p-1 m-0 left-panel\">\r\n            <Link to={`/?page=${currentPage}`}>Tasks</Link>\r\n            {username ? (\r\n                <Link to=\"/logout\">Logout</Link>\r\n            ) : (\r\n                <Link to=\"/login\">Login page</Link>\r\n            )}\r\n        </dir>\r\n    );\r\n};\r\nIndex.propTypes = {\r\n    currentPage: PropTypes.string,\r\n    username: PropTypes.string,\r\n    handleLogout: PropTypes.func,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { clearSessionData } from \"../../utils/functions/localstoreFunctions\";\r\nimport LeftPanel from \"../../components/panels/LeftPanel\";\r\n\r\nconst Index = () => {\r\n    const { currentPage, userData } = useSelector((state) => ({\r\n        currentPage: state.currentPage,\r\n        userData: state.userData,\r\n    }));\r\n\r\n    const { username } = userData;\r\n\r\n    const handleLogout = () => clearSessionData();\r\n\r\n    return (\r\n        <LeftPanel\r\n            username={username}\r\n            currentPage={currentPage}\r\n            handleLogout={handleLogout}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ fieldList, onChange, errorList }) =>\r\n    fieldList.map(({ name, ...props }) => (\r\n        <TextField\r\n            key={name}\r\n            name={name}\r\n            {...props}\r\n            error={Boolean(errorList[name])}\r\n            onChange={onChange}\r\n            helperText={errorList[name] ?? \" \"}\r\n        />\r\n    ));\r\n\r\nIndex.propTypes = {\r\n    fieldList: PropTypes.arrayOf(PropTypes.object),\r\n    onChange: PropTypes.func,\r\n    errorList: PropTypes.object,\r\n};\r\n\r\nexport default Index;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Stack } from \"@mui/material\";\r\nimport TextFieldGroup from \"../TextFieldGroup\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst textFieldList = [\r\n    { name: \"username\", label: \"Username\" },\r\n    { name: \"password\", label: \"Password\" },\r\n];\r\n\r\nconst Index = ({ handleLogin }) => {\r\n    const [data, setData] = useState({});\r\n    const [errorList, setErrorList] = useState({});\r\n\r\n    const handleChange = ({ target }) =>\r\n        setData({ ...data, [target.name]: target.value });\r\n\r\n    return (\r\n        <>\r\n            <Stack\r\n                spacing={1}\r\n                justifyContent=\"space-between\"\r\n                style={{ width: \"310px\" }}\r\n            >\r\n                <TextFieldGroup\r\n                    fieldList={textFieldList}\r\n                    onChange={handleChange}\r\n                    errorList={errorList}\r\n                />\r\n            </Stack>\r\n            <Stack direction=\"row\" spacing={2}>\r\n                <Button\r\n                    onClick={async () => setErrorList(await handleLogin(data))}\r\n                    variant=\"outlined\"\r\n                    content=\"Login\"\r\n                >\r\n                    Login\r\n                </Button>\r\n            </Stack>\r\n        </>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    handleLogin: PropTypes.func,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { Button, Stack, Typography } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LoginForm from \"../LoginForm\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    loginPageViewStack: { width: \"100%\", height: \"90vh\" },\r\n});\r\n\r\nconst Index = ({\r\n    userData,\r\n    currentPageUrl,\r\n    handleLogout,\r\n    handleLogin,\r\n    message,\r\n}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Stack\r\n            className={classes.loginPageViewStack}\r\n            spacing={4}\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            {userData.username ? (\r\n                <>\r\n                    <Typography>{`You are logged in as ${userData.username}.`}</Typography>\r\n                    <Button\r\n                        component={Link}\r\n                        to={`/?page=${currentPageUrl}`}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Go back to the Task Page\r\n                    </Button>\r\n                    <Button variant=\"contained\" onClick={handleLogout}>\r\n                        Logout\r\n                    </Button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Typography {...message} />\r\n                    <LoginForm handleLogin={handleLogin} />\r\n                </>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    userData: PropTypes.object,\r\n    currentPageUrl: PropTypes.string,\r\n    handleLogout: PropTypes.func,\r\n    handleLogin: PropTypes.func,\r\n    message: PropTypes.shape({\r\n        color: PropTypes.string,\r\n        children: PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default Index;\r\n","import axios from \"axios\";\r\nimport { getSessionToken } from \"./utils/functions/localstoreFunctions\";\r\n\r\nexport const apiBaseURL = \"https://uxcandy.com/~shapoval/test-task-backend/v2\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: apiBaseURL,\r\n});\r\n\r\nconst developer = \"Example\";\r\n\r\nexport async function getTasksAndPages(url) {\r\n    const params = { developer };\r\n    try {\r\n        const response = await api.get(url, { params });\r\n        return {\r\n            tasks: response.data.message.tasks,\r\n            totalPageCount: Math.ceil(\r\n                response.data.message.total_task_count / 3\r\n            ),\r\n        };\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function loginPost({ username = \"\", password = \"\" }) {\r\n    try {\r\n        const data = new FormData();\r\n        data.append(\"username\", username);\r\n        data.append(\"password\", password);\r\n        const config = {\r\n            method: \"post\",\r\n            url: `/login?developer=${developer}`,\r\n            data: data,\r\n        };\r\n\r\n        return await api(config);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function createPost({ username, email, text }) {\r\n    try {\r\n        const data = new FormData();\r\n        data.append(\"username\", username);\r\n        data.append(\"email\", email);\r\n        data.append(\"text\", text);\r\n        const config = {\r\n            method: \"post\",\r\n            url: `/create?developer=${developer}`,\r\n            data: data,\r\n        };\r\n        return await api(config);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport async function editPost({ id, text, taskStatus }) {\r\n    try {\r\n        const data = new FormData();\r\n        data.append(\"id\", id);\r\n        data.append(\"text\", text);\r\n        data.append(\"status\", taskStatus);\r\n        data.append(\"token\", getSessionToken());\r\n        const config = {\r\n            method: \"post\",\r\n            url: `/edit/${id}?developer=${developer}`,\r\n            data: data,\r\n        };\r\n        return await api(config);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n","export default function (pathname) {\r\n    const match = pathname.match(/^\\/login\\/(?<param>[0])/);\r\n    if (match) {\r\n        switch (match.groups.param) {\r\n            case \"0\":\r\n                return { color: \"error\", children: \"You need to log in\" };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n","import LoginPageView from \"../../components/LoginPageView\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginPost } from \"../../api\";\r\nimport { setUserData } from \"../../reduxe/actions\";\r\nimport {\r\n    getSessionUsername,\r\n    setSessionData,\r\n    clearSessionData,\r\n} from \"../../utils/functions/localstoreFunctions\";\r\nimport getLoginPageMessage from \"../../utils/functions/getLoginPageMessage\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst OK = \"ok\";\r\n\r\nconst Index = ({ location }) => {\r\n    const { currentPageUrl, userData } = useSelector((state) => ({\r\n        currentPageUrl: state.currentPageUrl,\r\n        userData: state.userData,\r\n    }));\r\n    const dispatch = useDispatch();\r\n    const username = getSessionUsername() ?? userData.username;\r\n\r\n    useEffect(() => {\r\n        if (username && username !== userData.username)\r\n            dispatch(setUserData({ username }));\r\n    }, [username]);\r\n\r\n    const handleLogin = async (loginParams) => {\r\n        const loginResponse = await loginPost(loginParams);\r\n        if (loginResponse.status === 200 && loginResponse.data.status === OK) {\r\n            setSessionData(\r\n                loginParams.username,\r\n                loginResponse.data.message.token\r\n            );\r\n            dispatch(setUserData({ username: loginParams.username }));\r\n            return {};\r\n        }\r\n        return loginResponse.data.message;\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        clearSessionData();\r\n        setUserData({});\r\n    };\r\n\r\n    return (\r\n        <LoginPageView\r\n            userData={userData}\r\n            currentPageUrl={currentPageUrl}\r\n            message={getLoginPageMessage(location.pathname)}\r\n            handleLogout={handleLogout}\r\n            handleLogin={handleLogin}\r\n        />\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    location: PropTypes.object,\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ label, options, value, onChange }) => (\r\n    <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">{label}</FormLabel>\r\n        <RadioGroup\r\n            row\r\n            value={value}\r\n            onChange={(event, value) => onChange(value)}\r\n        >\r\n            {options.map((item) => (\r\n                <FormControlLabel\r\n                    key={item}\r\n                    value={item}\r\n                    control={<Radio />}\r\n                    label={item}\r\n                />\r\n            ))}\r\n        </RadioGroup>\r\n    </FormControl>\r\n);\r\n\r\nIndex.propTypes = {\r\n    label: PropTypes.string,\r\n    options: PropTypes.arrayOf(PropTypes.string),\r\n    value: PropTypes.string,\r\n    onChange: () => {},\r\n};\r\n\r\nexport default Index;\r\n","import { Button, Stack } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextFieldGroup from \"../TextFieldGroup\";\r\n\r\nconst textFieldList = [\r\n    { name: \"username\", label: \"Name\" },\r\n    { name: \"email\", label: \"E-mail\" },\r\n    { name: \"text\", label: \"Task discription\", rows: 4, multiline: true },\r\n];\r\n\r\nconst Index = ({ onSubmitClick }) => {\r\n    const [errorList, setErrorList] = useState({});\r\n    const [taskObject, setTaskObject] = useState({});\r\n\r\n    const handleChange = ({ target }) =>\r\n        setTaskObject({ ...taskObject, [target.name]: target.value });\r\n\r\n    const onSubmit = async () => setErrorList(await onSubmitClick(taskObject));\r\n\r\n    return (\r\n        <Stack spacing={1} justifyContent=\"space-between\">\r\n            <TextFieldGroup\r\n                fieldList={textFieldList}\r\n                onChange={handleChange}\r\n                errorList={errorList}\r\n            />\r\n            <Button variant=\"contained\" onClick={onSubmit}>\r\n                Sabmit\r\n            </Button>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    onSubmitClick: PropTypes.func,\r\n};\r\n\r\nexport default Index;\r\n","import { Stack } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport RadioButtons from \"../RadioButtonsGroup\";\r\nimport AddNewTaskGroup from \"../AddNewTaskGroup\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    rightStack: {\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flex: \"0 0 310px\",\r\n    },\r\n});\r\n\r\nconst Index = ({\r\n    sortField,\r\n    sortDirection,\r\n    handleChange,\r\n    handleCreateTask,\r\n}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Stack spacing={1} className={classes.rightStack}>\r\n            <RadioButtons\r\n                label=\"Sort Field\"\r\n                options={[\"username\", \"email\", \"status\"]}\r\n                value={sortField}\r\n                onChange={(value) => handleChange({ sortField: value })}\r\n            />\r\n            <RadioButtons\r\n                label=\"Sort Directions\"\r\n                options={[\"asc\", \"desc\"]}\r\n                value={sortDirection}\r\n                onChange={(value) => handleChange({ sortDirection: value })}\r\n            />\r\n            <AddNewTaskGroup onSubmitClick={handleCreateTask} />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    sortField: PropTypes.string,\r\n    sortDirection: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    handleCreateTask: PropTypes.func,\r\n};\r\nexport default Index;\r\n","import { Menu, MenuItem } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { ExpandMore } from \"@material-ui/icons\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst options = {\r\n    0: \"Task not completed\",\r\n    1: \"Task not completed, edited by admin\",\r\n    10: \"Mission accomplished\",\r\n    11: \"The task was edited by the admin and completed\",\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    ExpandMoreIcon: {\r\n        fontSize: \"large\",\r\n    },\r\n    statusMenuItem: {\r\n        display: \"block\",\r\n    },\r\n    div: ({ isEditingEnabled }) => ({\r\n        cursor: isEditingEnabled ? \"arrow\" : \"pointer\",\r\n        marginLeft: \"auto\",\r\n    }),\r\n});\r\n\r\nconst CustomMenu = withStyles({\r\n    paper: {\r\n        border: \"2px solid rgba(49, 54, 65, 1)\",\r\n        \"& .MuiList-root\": {\r\n            padding: 0,\r\n        },\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getvontentanchorel={null}\r\n        anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"left\",\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst Index = ({ value, onChange, isEditingEnabled }) => {\r\n    const classes = useStyles({ isEditingEnabled });\r\n    const [anchorElement, setAnchorElement] = useState(null);\r\n    const menuOpen = ({ currentTarget }) => {\r\n        setAnchorElement(currentTarget);\r\n    };\r\n    const open = Boolean(anchorElement);\r\n\r\n    const onMenuItemClick = (index) => {\r\n        setAnchorElement(null);\r\n        onChange(index);\r\n    };\r\n\r\n    const menuClose = () => setAnchorElement(null);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button\r\n                    id=\"basic-button\"\r\n                    aria-controls=\"basic-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={isEditingEnabled ? menuOpen : () => {}}\r\n                    endIcon={isEditingEnabled ? <ExpandMore /> : undefined}\r\n                >\r\n                    {`Status: ${options[value]}`}\r\n                </Button>\r\n                {isEditingEnabled && (\r\n                    <CustomMenu\r\n                        id=\"basic-menu\"\r\n                        anchorEl={anchorElement}\r\n                        open={open}\r\n                        onClose={menuClose}\r\n                        MenuListProps={{\r\n                            \"aria-labelledby\": \"basic-button\",\r\n                        }}\r\n                    >\r\n                        {Object.keys(options).map((key) => (\r\n                            <MenuItem\r\n                                key={key}\r\n                                className={classes.statusMenuItem}\r\n                                selected={key === value}\r\n                                onClick={() => onMenuItemClick(key)}\r\n                            >\r\n                                {options[key]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </CustomMenu>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nIndex.propTypes = {\r\n    value: PropTypes.number,\r\n    onChange: PropTypes.func,\r\n    isEditingEnabled: PropTypes.bool,\r\n};\r\nexport default Index;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Stack } from \"@mui/material\";\r\nimport StatusSelectedMenu from \"../StatusSelectedMenu\";\r\nimport { Fab, Typography } from \"@material-ui/core\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport { CheckCircle } from \"@material-ui/icons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles({\r\n    noBorder: {\r\n        border: \"none\",\r\n    },\r\n    marginLeftAuto: {\r\n        marginLeft: \"auto\",\r\n    },\r\n});\r\n\r\nconst Index = ({ data, userIsLogin, handleEditTask }) => {\r\n    const [text, setText] = useState(data.text);\r\n    const [taskStatus, setTaskStatus] = useState(data.status);\r\n    const classes = useStyles();\r\n    const [isEditingEnabled, setIsEditingEnabled] = useState(false);\r\n    return (\r\n        <dir className=\"p-1 flex-column task-box\">\r\n            <dir>\r\n                <Typography>{`USERNAME: ${data.username} E-MAIL: ${data.email}`}</Typography>\r\n            </dir>\r\n\r\n            <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                defaultValue={data.text}\r\n                InputProps={{\r\n                    classes: { notchedOutline: classes.noBorder },\r\n                    readOnly: !isEditingEnabled,\r\n                }}\r\n                onChange={(event) => setText(event.target.value)}\r\n            />\r\n            <Stack direction=\"row\">\r\n                <StatusSelectedMenu\r\n                    value={data.status}\r\n                    onChange={(index) => setTaskStatus(index)}\r\n                    isEditingEnabled={isEditingEnabled}\r\n                />\r\n                {userIsLogin && (\r\n                    <Fab\r\n                        className={classes.marginLeftAuto}\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            if (isEditingEnabled) {\r\n                                handleEditTask({\r\n                                    id: data.id,\r\n                                    text,\r\n                                    taskStatus,\r\n                                });\r\n                            }\r\n                            setIsEditingEnabled(!isEditingEnabled);\r\n                        }}\r\n                    >\r\n                        {isEditingEnabled ? <CheckCircle /> : <Edit />}\r\n                    </Fab>\r\n                )}\r\n            </Stack>\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    data: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        username: PropTypes.string,\r\n        email: PropTypes.string,\r\n        status: PropTypes.number,\r\n        text: PropTypes.string,\r\n    }),\r\n    userIsLogin: PropTypes.bool,\r\n    handleEditTask: PropTypes.func,\r\n};\r\nexport default Index;\r\n","import React from \"react\";\r\nimport ContentViewItem from \"../ContentViewItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ tasks, ...itemProps }) => {\r\n    return (\r\n        <dir className=\"flex-column f-1 p-1\">\r\n            {tasks.map((item) => (\r\n                <ContentViewItem key={item.id} data={item} {...itemProps} />\r\n            ))}\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    tasks: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number,\r\n            username: PropTypes.string,\r\n            email: PropTypes.string,\r\n            status: PropTypes.number,\r\n            text: PropTypes.string,\r\n        })\r\n    ),\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Index = ({ totalPageCount, curentPage, onPageChange }) => (\r\n    <Stack spacing={2} justifyContent=\"space-around\">\r\n        <Pagination\r\n            count={totalPageCount}\r\n            // defaultPage={curentPage}\r\n            page={curentPage}\r\n            shape=\"rounded\"\r\n            onChange={(event, value) => onPageChange(value)}\r\n        />\r\n    </Stack>\r\n);\r\n\r\nIndex.propTypes = {\r\n    totalPageCount: PropTypes.number,\r\n    curentPage: PropTypes.number,\r\n    onPageChange: () => {},\r\n};\r\n\r\nexport default Index;\r\n","export default function (text) {\r\n    return text\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&#039;\");\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport RightPanel from \"../../components/RightPanel\";\r\nimport ContentView from \"../../components/ContentView\";\r\nimport BottomPanel from \"../../components/BottomPanel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createPost, editPost, getTasksAndPages } from \"../../api\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCurrentPageURL, setUserData } from \"../../reduxe/actions\";\r\nimport escapeHtml from \"../../utils/functions/escapeHtml\";\r\nimport getSearchParams from \"../../utils/functions/getSearchParams\";\r\nimport createSearchParamsString from \"../../utils/functions/createSearchParamsString\";\r\nimport { clearSessionData } from \"../../utils/functions/localstoreFunctions\";\r\n\r\nconst ERROR = \"error\";\r\n\r\nconst Index = ({ history, location }) => {\r\n    const userData = useSelector((state) => state.userData);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [totalPageCount, setTotalPageCount] = useState(0);\r\n    const dispatch = useDispatch();\r\n    const searchParams = getSearchParams(location.search);\r\n\r\n    async function uploadData() {\r\n        const { tasks, totalPageCount } = await getTasksAndPages(\r\n            location.search\r\n        );\r\n        setTasks(tasks);\r\n        setTotalPageCount(totalPageCount);\r\n    }\r\n\r\n    async function handleCreateTask({ username = \"\", email = \"\", text = \"\" }) {\r\n        const createResponse = await createPost({\r\n            username,\r\n            email,\r\n            text: escapeHtml(text),\r\n        });\r\n        if (createResponse.data.status === \"error\") {\r\n            return createResponse.data.message;\r\n        } else {\r\n            uploadData(searchParams);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    const handleChangeSearchParams = (params) => {\r\n        const curentPageUrl =\r\n            location.pathname + createSearchParamsString(params, searchParams);\r\n        dispatch(setCurrentPageURL(curentPageUrl));\r\n        history.push(curentPageUrl);\r\n    };\r\n\r\n    const handleEditTask = async (data) => {\r\n        const editResponse = await editPost({\r\n            ...data,\r\n            text: escapeHtml(data.text),\r\n        });\r\n        if (\r\n            (editResponse.data.status =\r\n                ERROR && editResponse.data.message.token)\r\n        ) {\r\n            clearSessionData();\r\n            dispatch(setUserData({}));\r\n            history.push(\"/login/0\");\r\n        } else {\r\n            uploadData();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        uploadData();\r\n    }, [location.search]);\r\n\r\n    return (\r\n        <dir className=\"flex-row f-1\">\r\n            <dir className=\"flex-column f-1 task-page-container\">\r\n                <ContentView\r\n                    tasks={tasks}\r\n                    userIsLogin={Boolean(userData.username)}\r\n                    handleEditTask={handleEditTask}\r\n                />\r\n                <BottomPanel\r\n                    totalPageCount={totalPageCount}\r\n                    curentPage={searchParams.page}\r\n                    onPageChange={(page) => handleChangeSearchParams({ page })}\r\n                />\r\n            </dir>\r\n            <RightPanel\r\n                sortDirection={searchParams.sortDirection}\r\n                sortField={searchParams.sortField}\r\n                handleChange={handleChangeSearchParams}\r\n                handleCreateTask={handleCreateTask}\r\n            />\r\n        </dir>\r\n    );\r\n};\r\n\r\nIndex.propTypes = {\r\n    history: PropTypes.object,\r\n    location: PropTypes.object,\r\n};\r\n\r\nIndex.defaultProps = {\r\n    history: {},\r\n    location: {},\r\n};\r\n\r\nexport default Index;\r\n","export default function (locationSearch) {\r\n    const searchParams = new URLSearchParams(locationSearch);\r\n    const page = parseInt(searchParams.get(\"page\"));\r\n    const sortDirection = searchParams.get(\"sort_direction\");\r\n    const sortField = searchParams.get(\"sort_field\");\r\n    return { page, sortDirection, sortField };\r\n}\r\n","export default function (newParams, oldParams) {\r\n    const searchParams = new URLSearchParams();\r\n    searchParams.append(\r\n        \"sort_field\",\r\n        newParams.sortField ?? oldParams.sortField\r\n    );\r\n    searchParams.append(\r\n        \"sort_direction\",\r\n        newParams.sortDirection ?? oldParams.sortDirection\r\n    );\r\n    searchParams.append(\"page\", newParams.page ?? oldParams.page);\r\n    return `?${searchParams.toString()}`;\r\n}\r\n","import React, { useEffect } from \"react\";\nimport { setUserData } from \"./reduxe/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { getSessionUsername } from \"./utils/functions/localstoreFunctions\";\nimport LeftPanelControl from \"./containers/LeftPanelControl\";\nimport LoginPageControl from \"./containers/LoginPageControl\";\nimport TasksPageControl from \"./containers/TasksPageControl\";\n\nconst defaultTasksPage = {\n    pathname: \"/tasks\",\n    search: \"?sort_field=username&sort_direction=asc&page=1\",\n};\n\nfunction App() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(setUserData({ username: getSessionUsername() }));\n    }, [dispatch]);\n\n    return (\n        <dir className=\"w-100 h-100 flex-row\">\n            <LeftPanelControl />\n            <Switch>\n                <Route path=\"/tasks\" component={TasksPageControl} />\n                <Route exact path=\"/\">\n                    <Redirect to={defaultTasksPage} />\n                </Route>\n                <Route path=\"/login\" component={LoginPageControl} />\n            </Switch>\n        </dir>\n    );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { CURRENT_PAGE_URL, USER_DATA } from \"./actionTypes\";\r\n\r\nconst currentPageUrl = (state = \"\", { type, value }) => {\r\n    switch (type) {\r\n        case CURRENT_PAGE_URL:\r\n            return value;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst userData = (state = {}, { type, value }) => {\r\n    switch (type) {\r\n        case USER_DATA:\r\n            return value;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst resultReducer = combineReducers({ currentPageUrl, userData });\r\n\r\nexport default resultReducer;\r\n","import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport ReduxThunk from \"redux-thunk\";\nimport resultReducer from \"./reducers\";\n\nexport const store = createStore(resultReducer, applyMiddleware(ReduxThunk));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./reduxe/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}